{
  "version": 4,
  "terraform_version": "1.5.0",
  "serial": 52,
  "lineage": "d551b564-fc75-1ab6-a773-662cec7c6386",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd-oke",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd-oke",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.9.3",
                "chart": "argo-cd",
                "name": "argocd-oke",
                "namespace": "argocd-oke",
                "revision": 20,
                "values": "{\"apiVersionOverrides\":{\"cloudgoogle\":\"\"},\"applicationSet\":{\"affinity\":{},\"args\":{},\"certificate\":{\"additionalHosts\":[],\"annotations\":{},\"domain\":\"argocd.example.com\",\"duration\":\"\",\"enabled\":false,\"issuer\":{\"group\":\"\",\"kind\":\"\",\"name\":\"\"},\"privateKey\":{\"algorithm\":\"RSA\",\"encoding\":\"PKCS1\",\"rotationPolicy\":\"Never\",\"size\":2048},\"renewBefore\":\"\",\"secretName\":\"argocd-application-controller-tls\"},\"containerPorts\":{\"metrics\":8080,\"probe\":8081,\"webhook\":7000},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"deploymentAnnotations\":{},\"deploymentStrategy\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"enabled\":true,\"extraArgs\":[],\"extraContainers\":[],\"extraEnv\":[],\"extraEnvFrom\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"initContainers\":[],\"livenessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"servicePort\":8080,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"applicationset-controller\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":2,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":7000,\"portName\":\"webhook\",\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"argocd-applicationset-controller\"},\"tolerations\":[],\"topologySpreadConstraints\":[],\"webhook\":{\"ingress\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"ingressClassName\":\"\",\"labels\":{},\"pathType\":\"Prefix\",\"paths\":[\"/api/webhook\"],\"tls\":[]}}},\"configs\":{\"clusterCredentials\":[],\"cm\":{\"admin.enabled\":false,\"annotations\":{},\"application.instanceLabelKey\":\"argocd.argoproj.io/instance\",\"create\":true,\"dex.config\":\"logger:\\n  level: debug\\n  format: json\\nconnectors:\\n- type: saml\\n  id: aws\\n  name: \\\"AWS IAM Identity Center\\\"\\n  config:\\n    ssoURL: https://portal.sso.us-east-1.amazonaws.com/saml/assertion/Nzg4NDkyNTY1ODcxX2lucy0zYTIwZDE0MGM1NTg3ZDE5\\n    caData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lGQUxOVGRoZ3dEUVlKS29aSWh2Y05BUUVMQlFBd1JURVdNQlFHQTFVRUF3d04KWVcxaGVtOXVZWGR6TG1OdmJURU5NQXNHQTFVRUN3d0VTVVJCVXpFUE1BMEdBMVVFQ2d3R1FXMWhlbTl1TVFzdwpDUVlEVlFRR0V3SlZVekFlRncweU5EQXlNVGN5TURRME1EQmFGdzB5T1RBeU1UY3lNRFEwTURCYU1FVXhGakFVCkJnTlZCQU1NRFdGdFlYcHZibUYzY3k1amIyMHhEVEFMQmdOVkJBc01CRWxFUVZNeER6QU5CZ05WQkFvTUJrRnQKWVhwdmJqRUxNQWtHQTFVRUJoTUNWVk13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQgpBUURCekx1ZlV4Yng2ZWJ4Nkpvd0VWTEpvMndZL20rSXd6MXZwYXdIVDhWa2xpOVBrYmFxMUhTdU1YM2t3N1IyCkNlSVlrcWpqWHZFenNEOG9TVEhha2FCRmVOMnBQZG1jMHNPTzNtSzhUWmdmczNHbW4wOGwwK1JXNEgzNUFkNTAKd1IxY0NoNGUrQy9Bd3pqdHJnNmRQK0hlc1VFM1FXZ0lQcnBDNkJMRmhma1pZa2hjczFkU1d3SENzOWdUYUczMApLZ1BXSXV6elNXcndPL1hDajZldDM3c2hsbEsvby9vY0tWLzZSQ1pvY0s3TXNQR3JKaTluMURPVkRlaGVYVGVVCjdFbmVIMFFNamk5SXppOGltTkh0SW0ya0dpRFJ2ZmZrQlAzcHBrcjd4RjhZQzRRL3VoZGhBeGlMaVgwMExqMW0KM3ovczdtNE00WXMva29hT3BmQ3BYc2FUQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSWUwNjVFeQpDVys2c0U4RHUzdThxd1NsSTVXTFgwbTBZSCtRWHRucWMvbFcvT0o2cEQ0WFB5YXJ5VElVbEFrblUwRVVZSGhyCmpIYVJMSDRDZVJFekNtQmdjVTJGQjdNVzBraVBJaWhkbTJTTWkyTjN2WnVyZFJnM0k2ZjdTNUpvRFcxajVMZUoKVWhodXVvVWlhRVNuZW45Z1BSMVZMeXNIMnFiSkF1OWFTNXpHd0NaVjhONmVIdCtDS0tUb0wzZGlmTy9iQktyUgp0WGpwRmRkSGpyaWJQNGJYMXUvY2o5WmRLU3BEb3NlTkNCaHhHa0hHUEdDT1FGTzdpNmtiUmFPZnJOWElXcXhhClNONTZ5Wm5Xd3cvWU04U0pTZGgwZnBZajBCM3JKMVN4cWZ3WUxSY041aitIRmJyc3pqazA5VCttZ3NXRUZWYWwKYWNXaEhWQmV0UnNVQ1FFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\\n    entityIssuer: https://argocd.iad.pd/api/dex/callback\\n    redirectURI: https://argocd.iad.pd/api/dex/callback\\n    usernameAttr: email\\n    emailAttr: email\\n    groupsAttr: groups\\n\",\"exec.enabled\":false,\"server.rbac.log.enforce.enable\":false,\"timeout.hard.reconciliation\":\"0s\",\"timeout.reconciliation\":\"180s\",\"url\":\"https://argocd.iad.pd\"},\"cmp\":{\"annotations\":{},\"create\":false,\"plugins\":{}},\"credentialTemplates\":{},\"credentialTemplatesAnnotations\":{},\"gpg\":{\"annotations\":{},\"keys\":{}},\"params\":{\"annotations\":{},\"applicationsetcontroller.enable.progressive.syncs\":false,\"applicationsetcontroller.policy\":\"sync\",\"controller.operation.processors\":10,\"controller.repo.server.timeout.seconds\":60,\"controller.self.heal.timeout.seconds\":5,\"controller.status.processors\":20,\"create\":true,\"otlp.address\":\"\",\"reposerver.parallelism.limit\":0,\"server.basehref\":\"/\",\"server.disable.auth\":false,\"server.enable.gzip\":true,\"server.insecure\":true,\"server.rootpath\":\"\",\"server.staticassets\":\"/shared/app\",\"server.x.frame.options\":\"sameorigin\"},\"rbac\":{\"annotations\":{},\"create\":true,\"policy.csv\":\"g, a4d8a428-50f1-70ad-97b3-26dbf0e43861, role:admin\\ng, guest, role:readonly\\n\",\"policy.default\":\"role:readonly\",\"scopes\":\"[groups, email]\"},\"repositories\":{},\"repositoriesAnnotations\":{},\"secret\":{\"annotations\":{},\"argocdServerAdminPassword\":\"\",\"argocdServerAdminPasswordMtime\":\"\",\"bitbucketServerSecret\":\"\",\"bitbucketUUID\":\"\",\"createSecret\":true,\"extra\":{\"dex.github.clientSecret\":\"YmExOGQ4YTExMzI3NmYwZDlhOGFhNjQxMGY2NWUzNTkzZmQ4OTEyNQ==\"},\"githubSecret\":\"\",\"gitlabSecret\":\"\",\"gogsSecret\":\"\",\"labels\":{}},\"ssh\":{\"annotations\":{},\"extraHosts\":\"\",\"knownHosts\":\"[ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\\n[ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\\n[ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\\nbitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\\nbitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\\nbitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n\"},\"styles\":\"\",\"tls\":{\"annotations\":{},\"certificates\":{}}},\"controller\":{\"affinity\":{},\"args\":{},\"clusterRoleRules\":{\"enabled\":false,\"rules\":[]},\"containerPorts\":{\"metrics\":8082},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"extraContainers\":[],\"hostNetwork\":false,\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"initContainers\":[],\"metrics\":{\"applicationLabels\":{\"enabled\":false,\"labels\":[]},\"enabled\":false,\"rules\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"namespace\":\"\",\"selector\":{},\"spec\":[]},\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"servicePort\":8082,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"application-controller\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":2,\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"256Mi\"}},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"argocd-application-controller\"},\"statefulsetAnnotations\":{},\"tolerations\":[],\"topologySpreadConstraints\":[],\"volumeMounts\":[],\"volumes\":[]},\"crds\":{\"additionalLabels\":{},\"annotations\":{},\"install\":true,\"keep\":true},\"createAggregateRoles\":false,\"createClusterRoles\":true,\"dex\":{\"affinity\":{},\"certificateSecret\":{\"annotations\":{},\"ca\":\"\",\"crt\":\"\",\"enabled\":false,\"key\":\"\",\"labels\":{}},\"containerPorts\":{\"grpc\":5557,\"http\":5556,\"metrics\":5558},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"deploymentAnnotations\":{},\"deploymentStrategy\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"enabled\":true,\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"extraContainers\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"ghcr.io/dexidp/dex\",\"tag\":\"v2.37.0\"},\"imagePullSecrets\":[],\"initContainers\":[],\"initImage\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"resources\":{},\"tag\":\"\"},\"livenessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"\",\"logLevel\":\"\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"portName\":\"http-metrics\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"dex-server\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"resources\":{},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-dex-server\"},\"servicePortGrpc\":5557,\"servicePortGrpcName\":\"grpc\",\"servicePortHttp\":5556,\"servicePortHttpName\":\"http\",\"servicePortMetrics\":5558,\"tolerations\":[],\"topologySpreadConstraints\":[],\"volumeMounts\":[],\"volumes\":[]},\"externalRedis\":{\"existingSecret\":\"\",\"host\":\"\",\"password\":\"\",\"port\":6379,\"secretAnnotations\":{},\"username\":\"\"},\"extraObjects\":[],\"fullnameOverride\":\"\",\"global\":{\"addPrometheusAnnotations\":false,\"additionalLabels\":{},\"affinity\":{\"nodeAffinity\":{\"matchExpressions\":[],\"type\":\"hard\"},\"podAntiAffinity\":\"soft\"},\"certificateAnnotations\":{},\"deploymentAnnotations\":{},\"deploymentStrategy\":{},\"env\":[],\"hostAliases\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"quay.io/argoproj/argocd\",\"tag\":\"\"},\"imagePullSecrets\":[],\"logging\":{\"format\":\"text\",\"level\":\"info\"},\"networkPolicy\":{\"create\":false,\"defaultDenyIngress\":false},\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"revisionHistoryLimit\":3,\"securityContext\":{},\"statefulsetAnnotations\":{},\"tolerations\":[],\"topologySpreadConstraints\":[]},\"kubeVersionOverride\":\"\",\"nameOverride\":\"argocd\",\"notifications\":{\"affinity\":{},\"argocdUrl\":null,\"cm\":{\"create\":true},\"containerPorts\":{\"metrics\":9001},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"context\":{},\"deploymentAnnotations\":{},\"deploymentStrategy\":{\"type\":\"Recreate\"},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"enabled\":true,\"extraArgs\":[],\"extraContainers\":[],\"extraEnv\":[],\"extraEnvFrom\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"initContainers\":[],\"logFormat\":\"\",\"logLevel\":\"\",\"metrics\":{\"enabled\":false,\"port\":9001,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"metricRelabelings\":[],\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"notifications-controller\",\"nodeSelector\":{},\"notifiers\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"secret\":{\"annotations\":{},\"create\":true,\"items\":{},\"labels\":{}},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"argocd-notifications-controller\"},\"subscriptions\":[],\"templates\":{},\"tolerations\":[],\"topologySpreadConstraints\":[],\"triggers\":{}},\"openshift\":{\"enabled\":false},\"redis\":{\"affinity\":{},\"containerPorts\":{\"metrics\":9121,\"redis\":6379},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"deploymentAnnotations\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"enabled\":true,\"env\":[],\"envFrom\":[],\"exporter\":{\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"enabled\":false,\"env\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"public.ecr.aws/bitnami/redis-exporter\",\"tag\":\"1.53.0\"},\"resources\":{}},\"extraArgs\":[],\"extraContainers\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"public.ecr.aws/docker/library/redis\",\"tag\":\"7.0.13-alpine\"},\"imagePullSecrets\":[],\"initContainers\":[],\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"clusterIP\":\"None\",\"labels\":{},\"portName\":\"http-metrics\",\"servicePort\":9121,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"redis\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":999,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"service\":{\"annotations\":{},\"labels\":{}},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":false,\"create\":false,\"name\":\"\"},\"servicePort\":6379,\"tolerations\":[],\"topologySpreadConstraints\":[],\"volumeMounts\":[],\"volumes\":[]},\"redis-ha\":{\"additionalAffinities\":{},\"affinity\":\"\",\"containerSecurityContext\":{\"readOnlyRootFilesystem\":true},\"enabled\":false,\"exporter\":{\"enabled\":false,\"image\":\"public.ecr.aws/bitnami/redis-exporter\",\"tag\":\"1.53.0\"},\"haproxy\":{\"additionalAffinities\":{},\"affinity\":\"\",\"containerSecurityContext\":{\"readOnlyRootFilesystem\":true},\"enabled\":true,\"hardAntiAffinity\":true,\"metrics\":{\"enabled\":true},\"tolerations\":[]},\"hardAntiAffinity\":true,\"image\":{\"repository\":\"redis\",\"tag\":\"7.0.13-alpine\"},\"persistentVolume\":{\"enabled\":false},\"redis\":{\"config\":{\"save\":\"\\\"\\\"\"},\"masterGroupName\":\"argocd\"},\"tolerations\":[],\"topologySpreadConstraints\":{\"enabled\":false,\"maxSkew\":\"\",\"topologyKey\":\"\",\"whenUnsatisfiable\":\"\"}},\"repoServer\":{\"affinity\":{},\"autoscaling\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":5,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"certificateSecret\":{\"annotations\":{},\"ca\":\"\",\"crt\":\"\",\"enabled\":false,\"key\":\"\",\"labels\":{}},\"clusterRoleRules\":{\"enabled\":false,\"rules\":[]},\"containerPorts\":{\"metrics\":8084,\"server\":8081},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"deploymentAnnotations\":{},\"deploymentStrategy\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"extraContainers\":[],\"hostNetwork\":false,\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"initContainers\":[],\"lifecycle\":{},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"servicePort\":8084,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"repo-server\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"rbac\":[],\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"1024Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8081,\"portName\":\"https-repo-server\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"\"},\"tolerations\":[],\"topologySpreadConstraints\":[],\"useEphemeralHelmWorkingDir\":true,\"volumeMounts\":[],\"volumes\":[]},\"server\":{\"GKEbackendConfig\":{\"enabled\":false,\"spec\":{}},\"GKEfrontendConfig\":{\"enabled\":false,\"spec\":{}},\"GKEmanagedCertificate\":{\"domains\":[\"argocd.example.com\"],\"enabled\":false},\"affinity\":{},\"autoscaling\":{\"behavior\":{},\"enabled\":true,\"maxReplicas\":5,\"metrics\":[],\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"certificate\":{\"additionalHosts\":[],\"annotations\":{},\"domain\":\"argocd.example.com\",\"duration\":\"\",\"enabled\":false,\"issuer\":{\"group\":\"\",\"kind\":\"\",\"name\":\"\"},\"privateKey\":{\"algorithm\":\"RSA\",\"encoding\":\"PKCS1\",\"rotationPolicy\":\"Never\",\"size\":2048},\"renewBefore\":\"\",\"secretName\":\"argocd-server-tls\",\"usages\":[]},\"certificateSecret\":{\"annotations\":{},\"crt\":\"\",\"enabled\":false,\"key\":\"\",\"labels\":{}},\"containerPorts\":{\"metrics\":8083,\"server\":8080},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"deploymentAnnotations\":{},\"deploymentStrategy\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"env\":[],\"envFrom\":[],\"extensions\":{\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"enabled\":false,\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"ghcr.io/argoproj-labs/argocd-extensions\",\"tag\":\"v0.2.1\"},\"resources\":{\"limits\":{\"cpu\":\"150m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}},\"extraArgs\":[],\"extraContainers\":[],\"hostNetwork\":false,\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"ingress\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"ingressClassName\":\"\",\"labels\":{},\"pathType\":\"Prefix\",\"paths\":[\"/\"],\"tls\":[]},\"ingressGrpc\":{\"annotations\":{},\"awsALB\":{\"backendProtocolVersion\":\"HTTP2\",\"serviceType\":\"NodePort\"},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"ingressClassName\":\"\",\"isAWSALB\":false,\"labels\":{},\"pathType\":\"Prefix\",\"paths\":[\"/\"],\"tls\":[]},\"initContainers\":[],\"lifecycle\":{},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"servicePort\":8083,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"namespace\":\"\",\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"server\",\"nodeSelector\":{},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"route\":{\"annotations\":{},\"enabled\":false,\"hostname\":\"\",\"termination_policy\":\"None\",\"termination_type\":\"passthrough\"},\"service\":{\"annotations\":{},\"externalIPs\":[],\"externalTrafficPolicy\":\"\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePortHttp\":30080,\"nodePortHttps\":30443,\"servicePortHttp\":80,\"servicePortHttpName\":\"http\",\"servicePortHttps\":443,\"servicePortHttpsName\":\"https\",\"sessionAffinity\":\"\",\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"argocd-server\"},\"tolerations\":[],\"topologySpreadConstraints\":[],\"volumeMounts\":[],\"volumes\":[]}}",
                "version": "5.51.6"
              }
            ],
            "name": "argocd-oke",
            "namespace": "argocd-oke",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## Argo CD configuration\r\n## Ref: https://github.com/argoproj/argo-cd\r\n##\r\n\r\n# -- Provide a name in place of `argocd`\r\nnameOverride: argocd\r\n# -- String to fully override `\"argo-cd.fullname\"`\r\nfullnameOverride: \"\"\r\n# -- Override the Kubernetes version, which is used to evaluate certain manifests\r\nkubeVersionOverride: \"\"\r\n# Override APIVersions\r\n# If you want to template helm charts but cannot access k8s API server\r\n# you can set api versions here\r\napiVersionOverrides:\r\n  # -- String to override apiVersion of GKE resources rendered by this helm chart\r\n  cloudgoogle: \"\" # cloud.google.com/v1\r\n\r\n# -- Create aggregated roles that extend existing cluster roles to interact with argo-cd resources\r\n## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles\r\ncreateAggregateRoles: false\r\n# -- Create cluster roles for cluster-wide installation.\r\n## Used when you manage applications in the same cluster where Argo CD runs\r\ncreateClusterRoles: true\r\n\r\nopenshift:\r\n  # -- enables using arbitrary uid for argo repo server\r\n  enabled: false\r\n\r\n## Custom resource configuration\r\ncrds:\r\n  # -- Install and upgrade CRDs\r\n  install: true\r\n  # -- Keep CRDs on chart uninstall\r\n  keep: true\r\n  # -- Annotations to be added to all CRDs\r\n  annotations: {}\r\n  # -- Addtional labels to be added to all CRDs\r\n  additionalLabels: {}\r\n\r\n## Globally shared configuration\r\nglobal:\r\n  # -- Common labels for the all resources\r\n  additionalLabels: {}\r\n    # app: argo-cd\r\n\r\n  # -- Number of old deployment ReplicaSets to retain. The rest will be garbage collected.\r\n  revisionHistoryLimit: 3\r\n\r\n  # Default image used by all components\r\n  image:\r\n    # -- If defined, a repository applied to all Argo CD deployments\r\n    repository: quay.io/argoproj/argocd\r\n    # -- Overrides the global Argo CD image tag whose default is the chart appVersion\r\n    tag: \"\"\r\n    # -- If defined, a imagePullPolicy applied to all Argo CD deployments\r\n    imagePullPolicy: IfNotPresent\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  imagePullSecrets: []\r\n\r\n  # Default logging options used by all components\r\n  logging:\r\n    # -- Set the global logging format. Either: `text` or `json`\r\n    format: text\r\n    # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`\r\n    level: info\r\n\r\n  # -- Annotations for the all deployed Statefulsets\r\n  statefulsetAnnotations: {}\r\n\r\n  # -- Annotations for the all deployed Deployments\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations for the all deployed pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels for the all deployed pods\r\n  podLabels: {}\r\n\r\n  # -- Add Prometheus scrape annotations to all metrics services. This can be used as an alternative to the ServiceMonitors.\r\n  addPrometheusAnnotations: false\r\n\r\n  # -- Toggle and define pod-level security context.\r\n  # @default -- `{}` (See [values.yaml])\r\n  securityContext: {}\r\n  #  runAsUser: 999\r\n  #  runAsGroup: 999\r\n  #  fsGroup: 999\r\n\r\n  # -- Mapping between IP and hostnames that will be injected as entries in the pod's hosts files\r\n  hostAliases: []\r\n  # - ip: 10.20.30.40\r\n  #   hostnames:\r\n  #   - git.myhostname\r\n\r\n  # Default network policy rules used by all components\r\n  networkPolicy:\r\n    # -- Create NetworkPolicy objects for all components\r\n    create: false\r\n    # -- Default deny all ingress traffic\r\n    defaultDenyIngress: false\r\n\r\n  # -- Default priority class for all components\r\n  priorityClassName: \"\"\r\n\r\n  # -- Default node selector for all components\r\n  nodeSelector: {}\r\n\r\n  # -- Default tolerations for all components\r\n  tolerations: []\r\n\r\n  # Default affinity preset for all components\r\n  affinity:\r\n    # -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`\r\n    podAntiAffinity: soft\r\n    # Node affinity rules\r\n    nodeAffinity:\r\n      # -- Default node affinity rules. Either: `none`, `soft` or `hard`\r\n      type: hard\r\n      # -- Default match expressions for node affinity\r\n      matchExpressions: []\r\n        # - key: topology.kubernetes.io/zone\r\n        #   operator: In\r\n        #   values:\r\n        #    - antarctica-east1\r\n        #    - antarctica-west1\r\n\r\n  # -- Default [TopologySpreadConstraints] rules for all components\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector of the component\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy for the all deployed Deployments\r\n  deploymentStrategy: {}\r\n    # type: RollingUpdate\r\n    # rollingUpdate:\r\n    #   maxSurge: 25%\r\n    #   maxUnavailable: 25%\r\n\r\n  # -- Environment variables to pass to all deployed Deployments\r\n  env: []\r\n\r\n  # -- Annotations for the all deployed Certificates\r\n  certificateAnnotations: {}\r\n\r\n## Argo Configs\r\nconfigs:\r\n  # General Argo CD configuration\r\n  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml\r\n  cm:\r\n    # -- Create the argocd-cm configmap for [declarative setup]\r\n    create: true\r\n\r\n    # -- Annotations to be added to argocd-cm configmap\r\n    annotations: {}\r\n\r\n    # -- Argo CD's externally facing base URL (optional). Required when configuring SSO\r\n    url: \"https://argocd.iad.pd\"\r\n\r\n    # -- The name of tracking label used by Argo CD for resource pruning\r\n    # @default -- Defaults to app.kubernetes.io/instance\r\n    application.instanceLabelKey: argocd.argoproj.io/instance\r\n\r\n    # -- Enable logs RBAC enforcement\r\n    ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement\r\n    server.rbac.log.enforce.enable: false\r\n\r\n    # -- Enable exec feature in Argo UI\r\n    ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource\r\n    exec.enabled: false\r\n\r\n    # -- Enable local admin user\r\n    ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user\r\n    admin.enabled: false\r\n\r\n    # -- Timeout to discover if a new manifests version got published to the repository\r\n    timeout.reconciliation: 180s\r\n\r\n    # -- Timeout to refresh application data as well as target manifests cache\r\n    timeout.hard.reconciliation: 0s\r\n\r\n    # Dex configuration\r\n    dex.config: |\r\n      logger:\r\n        level: debug\r\n        format: json\r\n      connectors:\r\n      - type: saml\r\n        id: aws\r\n        name: \"AWS IAM Identity Center\"\r\n        config:\r\n          ssoURL: https://portal.sso.us-east-1.amazonaws.com/saml/assertion/Nzg4NDkyNTY1ODcxX2lucy0zYTIwZDE0MGM1NTg3ZDE5\r\n          caData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lGQUxOVGRoZ3dEUVlKS29aSWh2Y05BUUVMQlFBd1JURVdNQlFHQTFVRUF3d04KWVcxaGVtOXVZWGR6TG1OdmJURU5NQXNHQTFVRUN3d0VTVVJCVXpFUE1BMEdBMVVFQ2d3R1FXMWhlbTl1TVFzdwpDUVlEVlFRR0V3SlZVekFlRncweU5EQXlNVGN5TURRME1EQmFGdzB5T1RBeU1UY3lNRFEwTURCYU1FVXhGakFVCkJnTlZCQU1NRFdGdFlYcHZibUYzY3k1amIyMHhEVEFMQmdOVkJBc01CRWxFUVZNeER6QU5CZ05WQkFvTUJrRnQKWVhwdmJqRUxNQWtHQTFVRUJoTUNWVk13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQgpBUURCekx1ZlV4Yng2ZWJ4Nkpvd0VWTEpvMndZL20rSXd6MXZwYXdIVDhWa2xpOVBrYmFxMUhTdU1YM2t3N1IyCkNlSVlrcWpqWHZFenNEOG9TVEhha2FCRmVOMnBQZG1jMHNPTzNtSzhUWmdmczNHbW4wOGwwK1JXNEgzNUFkNTAKd1IxY0NoNGUrQy9Bd3pqdHJnNmRQK0hlc1VFM1FXZ0lQcnBDNkJMRmhma1pZa2hjczFkU1d3SENzOWdUYUczMApLZ1BXSXV6elNXcndPL1hDajZldDM3c2hsbEsvby9vY0tWLzZSQ1pvY0s3TXNQR3JKaTluMURPVkRlaGVYVGVVCjdFbmVIMFFNamk5SXppOGltTkh0SW0ya0dpRFJ2ZmZrQlAzcHBrcjd4RjhZQzRRL3VoZGhBeGlMaVgwMExqMW0KM3ovczdtNE00WXMva29hT3BmQ3BYc2FUQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSWUwNjVFeQpDVys2c0U4RHUzdThxd1NsSTVXTFgwbTBZSCtRWHRucWMvbFcvT0o2cEQ0WFB5YXJ5VElVbEFrblUwRVVZSGhyCmpIYVJMSDRDZVJFekNtQmdjVTJGQjdNVzBraVBJaWhkbTJTTWkyTjN2WnVyZFJnM0k2ZjdTNUpvRFcxajVMZUoKVWhodXVvVWlhRVNuZW45Z1BSMVZMeXNIMnFiSkF1OWFTNXpHd0NaVjhONmVIdCtDS0tUb0wzZGlmTy9iQktyUgp0WGpwRmRkSGpyaWJQNGJYMXUvY2o5WmRLU3BEb3NlTkNCaHhHa0hHUEdDT1FGTzdpNmtiUmFPZnJOWElXcXhhClNONTZ5Wm5Xd3cvWU04U0pTZGgwZnBZajBCM3JKMVN4cWZ3WUxSY041aitIRmJyc3pqazA5VCttZ3NXRUZWYWwKYWNXaEhWQmV0UnNVQ1FFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\r\n          entityIssuer: https://argocd.iad.pd/api/dex/callback\r\n          redirectURI: https://argocd.iad.pd/api/dex/callback\r\n          usernameAttr: email\r\n          emailAttr: email\r\n          groupsAttr: groups\r\n\r\n    # OIDC configuration as an alternative to dex (optional).\r\n    #oidc.config: |\r\n    ##  name: Keycloak\r\n     # issuer: https://iam-gru.crearecloud.com.br/auth/realms/customers\r\n     # clientID: argocd\r\n     # clientSecret: $oidc.keycloak.clientSecret\r\n     # requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\r\n\r\n\r\n    #   name: AzureAD\r\n    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0\r\n    #   clientID: CLIENT_ID\r\n    #   clientSecret: $oidc.azuread.clientSecret\r\n    #   rootCA: |\r\n    #     -----BEGIN CERTIFICATE-----\r\n    #     ... encoded certificate data here ...\r\n    #     -----END CERTIFICATE-----\r\n    #   requestedIDTokenClaims:\r\n    #     groups:\r\n    #       essential: true\r\n    #   requestedScopes:\r\n    #     - openid\r\n    #     - profile\r\n    #     - email\r\n\r\n  # Argo CD configuration parameters\r\n  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml\r\n  params:\r\n    # -- Create the argocd-cmd-params-cm configmap\r\n    # If false, it is expected the configmap will be created by something else.\r\n    create: true\r\n\r\n    # -- Annotations to be added to the argocd-cmd-params-cm ConfigMap\r\n    annotations: {}\r\n\r\n    ## Generic parameters\r\n    # -- Open-Telemetry collector address: (e.g. \"otel-collector:4317\")\r\n    otlp.address: ''\r\n\r\n    ## Controller Properties\r\n    # -- Number of application status processors\r\n    controller.status.processors: 20\r\n    # -- Number of application operation processors\r\n    controller.operation.processors: 10\r\n    # -- Specifies timeout between application self heal attempts\r\n    controller.self.heal.timeout.seconds: 5\r\n    # -- Repo server RPC call timeout seconds.\r\n    controller.repo.server.timeout.seconds: 60\r\n\r\n    ## Server properties\r\n    # -- Run server without TLS\r\n    server.insecure: true\r\n    # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /\r\n    server.basehref: /\r\n    # -- Used if Argo CD is running behind reverse proxy under subpath different from /\r\n    server.rootpath: ''\r\n    # -- Directory path that contains additional static assets\r\n    server.staticassets: /shared/app\r\n    # -- Disable Argo CD RBAC for user authentication\r\n    server.disable.auth: false\r\n    # -- Enable GZIP compression\r\n    server.enable.gzip: true\r\n    # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to \"\".\r\n    server.x.frame.options: sameorigin\r\n\r\n    ## Repo-server properties\r\n    # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.\r\n    reposerver.parallelism.limit: 0\r\n\r\n    ## ApplicationSet Properties\r\n    # -- Modify how application is synced between the generator and the cluster. One of: `sync`, `create-only`, `create-update`, `create-delete`\r\n    applicationsetcontroller.policy: sync\r\n    # -- Enables use of the Progressive Syncs capability\r\n    applicationsetcontroller.enable.progressive.syncs: false\r\n\r\n  # Argo CD RBAC policy configuration\r\n  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md\r\n  rbac:\r\n    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.\r\n    # If false, it is expected the configmap will be created by something else.\r\n    # Argo CD will not work if there is no configmap created with the name above.\r\n    create: true\r\n\r\n    # -- Annotations to be added to argocd-rbac-cm configmap\r\n    annotations: {}\r\n\r\n    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).\r\n    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...\r\n    policy.default: 'role:readonly'\r\n\r\n    # -- File containing user-defined policies and role definitions.\r\n    # @default -- `''` (See [values.yaml])\r\n    policy.csv: |\r\n      g, a4d8a428-50f1-70ad-97b3-26dbf0e43861, role:admin\r\n      g, guest, role:readonly\r\n\r\n\r\n\r\n    # Policy rules are in the form:\r\n    #  p, subject, resource, action, object, effect\r\n    # Role definitions and bindings are in the form:\r\n    #  g, subject, inherited-subject\r\n    # policy.csv |\r\n    #   p, role:org-admin, applications, *, */*, allow\r\n    #   p, role:org-admin, clusters, get, *, allow\r\n    #   p, role:org-admin, repositories, *, *, allow\r\n    #   p, role:org-admin, logs, get, *, allow\r\n    #   p, role:org-admin, exec, create, */*, allow\r\n    #   g, your-github-org:your-team, role:org-admin\r\n\r\n    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\r\n    # The scope value can be a string, or a list of strings.\r\n    scopes: '[groups, email]'\r\n\r\n  # GnuPG public keys for commit verification\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/\r\n  gpg:\r\n    # -- Annotations to be added to argocd-gpg-keys-cm configmap\r\n    annotations: {}\r\n\r\n    # -- [GnuPG] public keys to add to the keyring\r\n    # @default -- `{}` (See [values.yaml])\r\n    ## Note: Public keys should be exported with `gpg --export --armor \u003cKEY\u003e`\r\n    keys: {}\r\n      # 4AEE18F83AFDEB23: |\r\n      #   -----BEGIN PGP PUBLIC KEY BLOCK-----\r\n      #   ...\r\n      #   -----END PGP PUBLIC KEY BLOCK-----\r\n\r\n  # SSH known hosts for Git repositories\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys\r\n  ssh:\r\n    # -- Annotations to be added to argocd-ssh-known-hosts-cm configmap\r\n    annotations: {}\r\n\r\n    # -- Known hosts to be added to the known host list by default.\r\n    # @default -- See [values.yaml]\r\n    knownHosts: |\r\n      [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\r\n      [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\r\n      [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\r\n      bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\r\n      bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\r\n      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\r\n      github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\r\n      github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\r\n      github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\r\n      gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\r\n      gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\r\n      gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\r\n      ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\r\n      vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\r\n\r\n    # -- Additional known hosts for private repositories\r\n    extraHosts: ''\r\n\r\n  # Repository TLS certificates\r\n  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca\r\n  tls:\r\n    # -- Annotations to be added to argocd-tls-certs-cm configmap\r\n    annotations: {}\r\n\r\n    # -- TLS certificates for Git repositories\r\n    # @default -- `{}` (See [values.yaml])\r\n    certificates: {}\r\n      # server.example.com: |\r\n      #   -----BEGIN CERTIFICATE-----\r\n      #   ...\r\n      #   -----END CERTIFICATE-----\r\n\r\n  # ConfigMap for Config Management Plugins\r\n  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/\r\n  cmp:\r\n    # -- Create the argocd-cmp-cm configmap\r\n    create: false\r\n\r\n    # -- Annotations to be added to argocd-cmp-cm configmap\r\n    annotations: {}\r\n\r\n    # -- Plugin yaml files to be added to argocd-cmp-cm\r\n    plugins: {}\r\n      # --- First plugin\r\n      # my-plugin:\r\n      #   init:\r\n      #     command: [sh]\r\n      #     args: [-c, 'echo \"Initializing...\"']\r\n      #   generate:\r\n      #     command: [sh, -c]\r\n      #     args:\r\n      #       - |\r\n      #         echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"\r\n      #   discover:\r\n      #     fileName: \"./subdir/s*.yaml\"\r\n      #     find:\r\n      #       glob: \"**/Chart.yaml\"\r\n      #       command: [sh, -c, find . -name env.yaml]\r\n\r\n      # --- Second plugin\r\n      # my-plugin2:\r\n      #   init:\r\n      #     command: [sh]\r\n      #     args: [-c, 'echo \"Initializing...\"']\r\n      #   generate:\r\n      #     command: [sh, -c]\r\n      #     args:\r\n      #       - |\r\n      #         echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"\r\n      #   discover:\r\n      #     fileName: \"./subdir/s*.yaml\"\r\n      #     find:\r\n      #       glob: \"**/Chart.yaml\"\r\n      #       command: [sh, -c, find . -name env.yaml]\r\n\r\n  # -- Provide one or multiple [external cluster credentials]\r\n  # @default -- `[]` (See [values.yaml])\r\n  ## Ref:\r\n  ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters\r\n  ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials\r\n  ## - https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters\r\n  clusterCredentials: []\r\n    # - name: mycluster\r\n    #   server: https://mycluster.com\r\n    #   labels: {}\r\n    #   annotations: {}\r\n    #   config:\r\n    #     bearerToken: \"\u003cauthentication token\u003e\"\r\n    #     tlsClientConfig:\r\n    #       insecure: false\r\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\r\n    # - name: mycluster2\r\n    #   server: https://mycluster2.com\r\n    #   labels: {}\r\n    #   annotations: {}\r\n    #   namespaces: namespace1,namespace2\r\n    #   clusterResources: true\r\n    #   config:\r\n    #     bearerToken: \"\u003cauthentication token\u003e\"\r\n    #     tlsClientConfig:\r\n    #       insecure: false\r\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\r\n    # - name: mycluster3-project-scoped\r\n    #   server: https://mycluster3.com\r\n    #   labels: {}\r\n    #   annotations: {}\r\n    #   project: my-project1\r\n    #   config:\r\n    #     bearerToken: \"\u003cauthentication token\u003e\"\r\n    #     tlsClientConfig:\r\n    #       insecure: false\r\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\r\n\r\n  # DEPRECATED - Moved to configs.ssh.annotations\r\n  # knownHostsAnnotations: {}\r\n  # DEPRECATED - Moved to configs.ssh.knownHosts\r\n  # knownHosts: {}\r\n\r\n  # DEPRECATED - Moved to configs.tls.annotations\r\n  # tlsCertsAnnotations: {}\r\n  # DEPRECATED - Moved to configs.tls.certificates\r\n  # tlsCerts: {}\r\n\r\n  # -- Repository credentials to be used as Templates for other repos\r\n  ## Creates a secret for each key/value specified below to create repository credentials\r\n  credentialTemplates: {}\r\n    # github-enterprise-creds-1:\r\n    #   url: https://github.com/argoproj\r\n    #   githubAppID: 1\r\n    #   githubAppInstallationID: 2\r\n    #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3\r\n    #   githubAppPrivateKey: |\r\n    #     -----BEGIN OPENSSH PRIVATE KEY-----\r\n    #     ...\r\n    #     -----END OPENSSH PRIVATE KEY-----\r\n    # https-creds:\r\n    #   url: https://github.com/argoproj\r\n    #   password: my-password\r\n    #   username: my-username\r\n    # ssh-creds:\r\n    #  url: git@github.com:argoproj-labs\r\n    #  sshPrivateKey: |\r\n    #    -----BEGIN OPENSSH PRIVATE KEY-----\r\n    #    ...\r\n    #    -----END OPENSSH PRIVATE KEY-----\r\n\r\n  # -- Annotations to be added to `configs.credentialTemplates` Secret\r\n  credentialTemplatesAnnotations: {}\r\n\r\n  # -- Repositories list to be used by applications\r\n  ## Creates a secret for each key/value specified below to create repositories\r\n  ## Note: the last example in the list would use a repository credential template, configured under \"configs.credentialTemplates\".\r\n  repositories: {}\r\n    # istio-helm-repo:\r\n    #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\r\n    #   name: istio.io\r\n    #   type: helm\r\n    # private-helm-repo:\r\n    #   url: https://my-private-chart-repo.internal\r\n    #   name: private-repo\r\n    #   type: helm\r\n    #   password: my-password\r\n    #   username: my-username\r\n    # private-repo:\r\n    #   url: https://github.com/argoproj/private-repo\r\n\r\n  # -- Annotations to be added to `configs.repositories` Secret\r\n  repositoriesAnnotations: {}\r\n\r\n  # Argo CD sensitive data\r\n  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets\r\n  secret:\r\n    # -- Create the argocd-secret\r\n    createSecret: true\r\n    # -- Labels to be added to argocd-secret\r\n    labels: {}\r\n    # -- Annotations to be added to argocd-secret\r\n    annotations: {}\r\n\r\n    # -- Shared secret for authenticating GitHub webhook events\r\n    githubSecret: \"\"\r\n    # -- Shared secret for authenticating GitLab webhook events\r\n    gitlabSecret: \"\"\r\n    # -- Shared secret for authenticating BitbucketServer webhook events\r\n    bitbucketServerSecret: \"\"\r\n    # -- UUID for authenticating Bitbucket webhook events\r\n    bitbucketUUID: \"\"\r\n    # -- Shared secret for authenticating Gogs webhook events\r\n    gogsSecret: \"\"\r\n\r\n    # -- add additional secrets to be added to argocd-secret\r\n    ## Custom secrets. Useful for injecting SSO secrets into environment variables.\r\n    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets\r\n    ## Note that all values must be non-empty.\r\n    extra:\r\n      dex.github.clientSecret: YmExOGQ4YTExMzI3NmYwZDlhOGFhNjQxMGY2NWUzNTkzZmQ4OTEyNQ==\r\n      # LDAP_PASSWORD: \"mypassword\"\r\n\r\n    # -- Argo TLS Data\r\n    # DEPRECATED - Use server.certificate or server.certificateSecret\r\n    # argocdServerTlsConfig:\r\n    #  key: ''\r\n    #  crt: ''\r\n\r\n    # -- Bcrypt hashed admin password\r\n    ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with\r\n    ## `htpasswd -nbBC 10 \"\" $ARGO_PWD | tr -d ':\\n' | sed 's/$2y/$2a/'`\r\n    argocdServerAdminPassword: \"\"\r\n    # -- Admin password modification time. Eg. `\"2006-01-02T15:04:05Z\"`\r\n    # @default -- `\"\"` (defaults to current time)\r\n    argocdServerAdminPasswordMtime: \"\"\r\n\r\n  # -- Define custom [CSS styles] for your argo instance.\r\n  # This setting will automatically mount the provided CSS and reference it in the argo configuration.\r\n  # @default -- `\"\"` (See [values.yaml])\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/\r\n  styles: \"\"\r\n  # styles: |\r\n  #  .sidebar {\r\n  #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);\r\n  #  }\r\n\r\n# -- Array of extra K8s manifests to deploy\r\n## Note: Supports use of custom Helm templates\r\nextraObjects: []\r\n  # - apiVersion: secrets-store.csi.x-k8s.io/v1\r\n  #   kind: SecretProviderClass\r\n  #   metadata:\r\n  #     name: argocd-secrets-store\r\n  #   spec:\r\n  #     provider: aws\r\n  #     parameters:\r\n  #       objects: |\r\n  #         - objectName: \"argocd\"\r\n  #           objectType: \"secretsmanager\"\r\n  #           jmesPath:\r\n  #               - path: \"client_id\"\r\n  #                 objectAlias: \"client_id\"\r\n  #               - path: \"client_secret\"\r\n  #                 objectAlias: \"client_secret\"\r\n  #     secretObjects:\r\n  #     - data:\r\n  #       - key: client_id\r\n  #         objectName: client_id\r\n  #       - key: client_secret\r\n  #         objectName: client_secret\r\n  #       secretName: argocd-secrets-store\r\n  #       type: Opaque\r\n  #       labels:\r\n  #         app.kubernetes.io/part-of: argocd\r\n\r\n## Application controller\r\ncontroller:\r\n  # -- Application controller name string\r\n  name: application-controller\r\n\r\n  # -- The number of application controller pods to run.\r\n  # Additional replicas will cause sharding of managed clusters across number of replicas.\r\n  replicas: 2\r\n\r\n  ## Application controller Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the application controller\r\n    enabled: false\r\n    # -- Labels to be added to application controller pdb\r\n    labels: {}\r\n    # -- Annotations to be added to application controller pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `controller.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Application controller image\r\n  image:\r\n    # -- Repository to use for the application controller\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\"\r\n    # -- Tag to use for the application controller\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\"\r\n    # -- Image pull policy for the application controller\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- DEPRECATED - Application controller commandline flags\r\n  args: {}\r\n  # DEPRECATED - Use configs.params to override\r\n  #  # -- define the application controller `--status-processors`\r\n  #  statusProcessors: \"20\"\r\n  #  # -- define the application controller `--operation-processors`\r\n  #  operationProcessors: \"10\"\r\n  #  # -- define the application controller `--app-hard-resync`\r\n  #  appHardResyncPeriod: \"0\"\r\n  #  # -- define the application controller `--app-resync`\r\n  #  appResyncPeriod: \"180\"\r\n  #  # -- define the application controller `--self-heal-timeout-seconds`\r\n  #  selfHealTimeout: \"5\"\r\n  #  # -- define the application controller `--repo-server-timeout-seconds`\r\n  #  repoServerTimeoutSeconds: \"60\"\r\n\r\n  # -- Additional command line arguments to pass to application controller\r\n  extraArgs: []\r\n\r\n  # -- Environment variables to pass to application controller\r\n  env: []\r\n\r\n  # -- envFrom to pass to application controller\r\n  # @default -- `[]` (See [values.yaml])\r\n  envFrom: []\r\n  # - configMapRef:\r\n  #     name: config-map-name\r\n  # - secretRef:\r\n  #     name: secret-name\r\n\r\n  # -- Additional containers to be added to the application controller pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n\r\n  # -- Init containers to add to the application controller pod\r\n  ## If your target Kubernetes cluster(s) require a custom credential (exec) plugin\r\n  ## you could use this (and the same in the server pod) to provide such executable\r\n  ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins\r\n  ## Note: Supports use of custom Helm templates\r\n  initContainers: []\r\n  #  - name: download-tools\r\n  #    image: alpine:3\r\n  #    command: [sh, -c]\r\n  #    args:\r\n  #      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip \u0026\u0026\r\n  #        unzip kubelogin.zip \u0026\u0026 mv bin/linux_amd64/kubelogin /custom-tools/\r\n  #    volumeMounts:\r\n  #      - mountPath: /custom-tools\r\n  #        name: custom-tools\r\n\r\n  # -- Additional volumeMounts to the application controller main container\r\n  volumeMounts: []\r\n  #  - mountPath: /usr/local/bin/kubelogin\r\n  #    name: custom-tools\r\n  #    subPath: kubelogin\r\n\r\n  # -- Additional volumes to the application controller pod\r\n  volumes: []\r\n  #  - name: custom-tools\r\n  #    emptyDir: {}\r\n\r\n  # -- Annotations for the application controller StatefulSet\r\n  statefulsetAnnotations: {}\r\n\r\n  # -- Annotations to be added to application controller pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be added to application controller pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for the application controller pods\r\n  resources: \r\n    limits:\r\n      cpu: 500m\r\n      memory: 1024Mi\r\n    requests:\r\n      cpu: 250m\r\n      memory: 256Mi\r\n\r\n  # Application controller container ports\r\n  containerPorts:\r\n    # -- Metrics container port\r\n    metrics: 8082\r\n\r\n  # -- Host Network for application controller pods\r\n  hostNetwork: false\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for application controller pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Application controller container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  # Readiness probe for application controller\r\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\r\n  readinessProbe:\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  # -- Priority class for the application controller pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules to the deployment\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the application controller\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  serviceAccount:\r\n    # -- Create a service account for the application controller\r\n    create: true\r\n    # -- Service account name\r\n    name: argocd-application-controller\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Labels applied to created service account\r\n    labels: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  ## Application controller metrics configuration\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n    applicationLabels:\r\n      # -- Enables additional labels in argocd_app_labels metric\r\n      enabled: false\r\n      # -- Additional labels\r\n      labels: []\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: \"\"\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port\r\n      servicePort: 8082\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor interval\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\" # \"monitoring\"\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n    rules:\r\n      # -- Deploy a PrometheusRule for the application controller\r\n      enabled: false\r\n      # -- PrometheusRule namespace\r\n      namespace: \"\" # \"monitoring\"\r\n      # -- PrometheusRule selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- PrometheusRule labels\r\n      additionalLabels: {}\r\n      # -- PrometheusRule annotations\r\n      annotations: {}\r\n\r\n      # -- PrometheusRule.Spec for the application controller\r\n      spec: []\r\n      # - alert: ArgoAppMissing\r\n      #   expr: |\r\n      #     absent(argocd_app_info) == 1\r\n      #   for: 15m\r\n      #   labels:\r\n      #     severity: critical\r\n      #   annotations:\r\n      #     summary: \"[Argo CD] No reported applications\"\r\n      #     description: \u003e\r\n      #       Argo CD has not reported any applications data for the past 15 minutes which\r\n      #       means that it must be down or not functioning properly.  This needs to be\r\n      #       resolved for this cloud to continue to maintain state.\r\n      # - alert: ArgoAppNotSynced\r\n      #   expr: |\r\n      #     argocd_app_info{sync_status!=\"Synced\"} == 1\r\n      #   for: 12h\r\n      #   labels:\r\n      #     severity: warning\r\n      #   annotations:\r\n      #     summary: \"[{{`{{$labels.name}}`}}] Application not synchronized\"\r\n      #     description: \u003e\r\n      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over\r\n      #       12 hours which means that the state of this cloud has drifted away from the\r\n      #       state inside Git.\r\n\r\n  ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\r\n  ## Defaults to off\r\n  clusterRoleRules:\r\n    # -- Enable custom rules for the application controller's ClusterRole resource\r\n    enabled: false\r\n    # -- List of custom rules for the application controller's ClusterRole resource\r\n    rules: []\r\n\r\n## Dex\r\ndex:\r\n  # -- Enable dex\r\n  enabled: true\r\n  # -- Dex name\r\n  name: dex-server\r\n\r\n  # -- Additional command line arguments to pass to the Dex server\r\n  extraArgs: []\r\n\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n    service:\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor interval\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\" # \"monitoring\"\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n\r\n  ## Dex Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the Dex server\r\n    enabled: false\r\n    # -- Labels to be added to Dex server pdb\r\n    labels: {}\r\n    # -- Annotations to be added to Dex server pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `dex.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Dex image\r\n  image:\r\n    # -- Dex image repository\r\n    repository: ghcr.io/dexidp/dex\r\n    # -- Dex image tag\r\n    tag: v2.37.0\r\n    # -- Dex imagePullPolicy\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # Argo CD init image that creates Dex config\r\n  initImage:\r\n    # -- Argo CD init image repository\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\"\r\n    # -- Argo CD init image tag\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\"\r\n    # -- Argo CD init image imagePullPolicy\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n    # -- Argo CD init image resources\r\n    # @default -- `{}` (defaults to dex.resources)\r\n    resources: {}\r\n    #  requests:\r\n    #    cpu: 5m\r\n    #    memory: 96Mi\r\n    #  limits:\r\n    #    cpu: 10m\r\n    #    memory: 144Mi\r\n\r\n  # -- Environment variables to pass to the Dex server\r\n  env: []\r\n\r\n  # -- envFrom to pass to the Dex server\r\n  # @default -- `[]` (See [values.yaml])\r\n  envFrom: []\r\n  # - configMapRef:\r\n  #     name: config-map-name\r\n  # - secretRef:\r\n  #     name: secret-name\r\n\r\n  # -- Additional containers to be added to the dex pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n\r\n  # -- Init containers to add to the dex pod\r\n  ## Note: Supports use of custom Helm templates\r\n  initContainers: []\r\n\r\n  # -- Additional volumeMounts to the dex main container\r\n  volumeMounts: []\r\n\r\n  # -- Additional volumes to the dex pod\r\n  volumes: []\r\n\r\n  # TLS certificate configuration via Secret\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-dex-server\r\n  ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart Dex automatically without extra controllers.\r\n  certificateSecret:\r\n    # -- Create argocd-dex-server-tls secret\r\n    enabled: false\r\n    # -- Labels to be added to argocd-dex-server-tls secret\r\n    labels: {}\r\n    # -- Annotations to be added to argocd-dex-server-tls secret\r\n    annotations: {}\r\n    # -- Certificate authority. Required for self-signed certificates.\r\n    ca: ''\r\n    # -- Certificate private key\r\n    key: ''\r\n    # -- Certificate data. Must contain SANs of Dex service (ie: argocd-dex-server, argocd-dex-server.argo-cd.svc)\r\n    crt: ''\r\n\r\n  # -- Annotations to be added to the Dex server Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations to be added to the Dex server pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be added to the Dex server pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for dex\r\n  resources: {}\r\n  #  limits:\r\n  #    cpu: 50m\r\n  #    memory: 64Mi\r\n  #  requests:\r\n  #    cpu: 10m\r\n  #    memory: 32Mi\r\n\r\n  # Dex container ports\r\n  # NOTE: These ports are currently hardcoded and cannot be changed\r\n  containerPorts:\r\n    # -- HTTP container port\r\n    http: 5556\r\n    # -- gRPC container port\r\n    grpc: 5557\r\n    # -- Metrics container port\r\n    metrics: 5558\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for Dex server pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Dex container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  ## Probes for Dex server\r\n  ## Supported from Dex \u003e= 2.28.0\r\n  livenessProbe:\r\n    # -- Enable Kubernetes liveness probe for Dex \u003e= 2.28.0\r\n    enabled: false\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  readinessProbe:\r\n    # -- Enable Kubernetes readiness probe for Dex \u003e= 2.28.0\r\n    enabled: false\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  serviceAccount:\r\n    # -- Create dex service account\r\n    create: true\r\n    # -- Dex service account name\r\n    name: argocd-dex-server\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  # -- Service port for HTTP access\r\n  servicePortHttp: 5556\r\n  # -- Service port name for HTTP access\r\n  servicePortHttpName: http\r\n  # -- Service port for gRPC access\r\n  servicePortGrpc: 5557\r\n  # -- Service port name for gRPC access\r\n  servicePortGrpcName: grpc\r\n  # -- Service port for metrics access\r\n  servicePortMetrics: 5558\r\n\r\n  # -- Priority class for the dex pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules to the deployment\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to dex\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy to be added to the Dex server Deployment\r\n  deploymentStrategy: {}\r\n    # type: RollingUpdate\r\n    # rollingUpdate:\r\n    #   maxSurge: 25%\r\n    #   maxUnavailable: 25%\r\n\r\n  # -- Dex log format. Either `text` or `json`\r\n  # @default -- `\"\"` (defaults to global.logging.format)\r\n  logFormat: \"\"\r\n  # -- Dex log level. One of: `debug`, `info`, `warn`, `error`\r\n  # @default -- `\"\"` (defaults to global.logging.level)\r\n  logLevel: \"\"\r\n\r\n## Redis\r\nredis:\r\n  # -- Enable redis\r\n  enabled: true\r\n  # -- Redis name\r\n  name: redis\r\n\r\n  ## Redis Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the Redis\r\n    enabled: false\r\n    # -- Labels to be added to Redis pdb\r\n    labels: {}\r\n    # -- Annotations to be added to Redis pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `redis.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Redis image\r\n  image:\r\n    # -- Redis repository\r\n    repository: public.ecr.aws/docker/library/redis\r\n    # -- Redis tag\r\n    tag: 7.0.13-alpine\r\n    # -- Redis image pull policy\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  ## Prometheus redis-exporter sidecar\r\n  exporter:\r\n    # -- Enable Prometheus redis-exporter sidecar\r\n    enabled: false\r\n    # -- Environment variables to pass to the Redis exporter\r\n    env: []\r\n    ## Prometheus redis-exporter image\r\n    image:\r\n      # -- Repository to use for the redis-exporter\r\n      repository: public.ecr.aws/bitnami/redis-exporter\r\n      # -- Tag to use for the redis-exporter\r\n      tag: 1.53.0\r\n      # -- Image pull policy for the redis-exporter\r\n      # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n      imagePullPolicy: \"\"\r\n\r\n    # -- Redis exporter security context\r\n    # @default -- See [values.yaml]\r\n    containerSecurityContext:\r\n      runAsNonRoot: true\r\n      readOnlyRootFilesystem: true\r\n      allowPrivilegeEscalation: false\r\n      seccompProfile:\r\n        type: RuntimeDefault\r\n      capabilities:\r\n        drop:\r\n        - ALL\r\n\r\n    # -- Resource limits and requests for redis-exporter sidecar\r\n    resources: {}\r\n      # limits:\r\n      #   cpu: 50m\r\n      #   memory: 64Mi\r\n      # requests:\r\n      #   cpu: 10m\r\n      #   memory: 32Mi\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- Additional command line arguments to pass to redis-server\r\n  extraArgs: []\r\n  # - --bind\r\n  # - \"0.0.0.0\"\r\n\r\n  # -- Environment variables to pass to the Redis server\r\n  env: []\r\n\r\n  # -- envFrom to pass to the Redis server\r\n  # @default -- `[]` (See [values.yaml])\r\n  envFrom: []\r\n  # - configMapRef:\r\n  #     name: config-map-name\r\n  # - secretRef:\r\n  #     name: secret-name\r\n\r\n  # -- Additional containers to be added to the redis pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n\r\n  # -- Init containers to add to the redis pod\r\n  ## Note: Supports use of custom Helm templates\r\n  initContainers: []\r\n\r\n  # -- Additional volumeMounts to the redis container\r\n  volumeMounts: []\r\n\r\n  # -- Additional volumes to the redis pod\r\n  volumes: []\r\n\r\n  # -- Annotations to be added to the Redis server Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations to be added to the Redis server pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be added to the Redis server pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for redis\r\n  resources: {}\r\n  #  limits:\r\n  #    cpu: 200m\r\n  #    memory: 128Mi\r\n  #  requests:\r\n  #    cpu: 100m\r\n  #    memory: 64Mi\r\n\r\n  # -- Redis pod-level security context\r\n  # @default -- See [values.yaml]\r\n  securityContext:\r\n    runAsNonRoot: true\r\n    runAsUser: 999\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n\r\n  # Redis container ports\r\n  containerPorts:\r\n    # -- Redis container port\r\n    redis: 6379\r\n    # -- Metrics container port\r\n    metrics: 9121\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for Redis server pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Redis container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  # -- Redis service port\r\n  servicePort: 6379\r\n\r\n  # -- Priority class for redis pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules to the deployment\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to redis\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  serviceAccount:\r\n    # -- Create a service account for the redis pod\r\n    create: false\r\n    # -- Service account name for redis pod\r\n    name: \"\"\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: false\r\n\r\n  service:\r\n    # -- Redis service annotations\r\n    annotations: {}\r\n    # -- Additional redis service labels\r\n    labels: {}\r\n\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n\r\n    # Redis metrics service configuration\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: None\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port\r\n      servicePort: 9121\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Interval at which metrics should be scraped\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\" # \"monitoring\"\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n\r\n## Redis-HA subchart replaces custom redis deployment when `redis-ha.enabled=true`\r\n# Ref: https://github.com/DandyDeveloper/charts/blob/master/charts/redis-ha/values.yaml\r\nredis-ha:\r\n  # -- Enables the Redis HA subchart and disables the custom Redis single node deployment\r\n  enabled: false\r\n  ## Redis image\r\n  image:\r\n    # -- Redis repository\r\n    repository: redis\r\n    # -- Redis tag\r\n    tag: 7.0.13-alpine\r\n  ## Prometheus redis-exporter sidecar\r\n  exporter:\r\n    # -- Enable Prometheus redis-exporter sidecar\r\n    enabled: false\r\n    # -- Repository to use for the redis-exporter\r\n    image: public.ecr.aws/bitnami/redis-exporter\r\n    # -- Tag to use for the redis-exporter\r\n    tag: 1.53.0\r\n  persistentVolume:\r\n    # -- Configures persistence on Redis nodes\r\n    enabled: false\r\n  ## Redis specific configuration options\r\n  redis:\r\n    # -- Redis convention for naming the cluster group: must match `^[\\\\w-\\\\.]+$` and can be templated\r\n    masterGroupName: argocd\r\n    # -- Any valid redis config options in this section will be applied to each server (see `redis-ha` chart)\r\n    # @default -- See [values.yaml]\r\n    config:\r\n      # -- Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred. `\"\"`  is disabled\r\n      # @default -- `'\"\"'`\r\n      save: '\"\"'\r\n  ## Enables a HA Proxy for better LoadBalancing / Sentinel Master support. Automatically proxies to Redis master.\r\n  haproxy:\r\n    # -- Enabled HAProxy LoadBalancing/Proxy\r\n    enabled: true\r\n    metrics:\r\n      # -- HAProxy enable prometheus metric scraping\r\n      enabled: true\r\n    # -- Whether the haproxy pods should be forced to run on separate nodes.\r\n    hardAntiAffinity: true\r\n    # -- Additional affinities to add to the haproxy pods.\r\n    additionalAffinities: {}\r\n    # -- Assign custom [affinity] rules to the haproxy pods.\r\n    affinity: |\r\n\r\n    # -- [Tolerations] for use with node taints for haproxy pods.\r\n    tolerations: []\r\n    # -- HAProxy container-level security context\r\n    # @default -- See [values.yaml]\r\n    containerSecurityContext:\r\n      readOnlyRootFilesystem: true\r\n\r\n  # -- Whether the Redis server pods should be forced to run on separate nodes.\r\n  hardAntiAffinity: true\r\n\r\n  # -- Additional affinities to add to the Redis server pods.\r\n  additionalAffinities: {}\r\n\r\n  # -- Assign custom [affinity] rules to the Redis pods.\r\n  affinity: |\r\n\r\n  # -- [Tolerations] for use with node taints for Redis pods.\r\n  tolerations: []\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the Redis pods.\r\n  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  topologySpreadConstraints:\r\n    # -- Enable Redis HA topology spread constraints\r\n    enabled: false\r\n    # -- Max skew of pods tolerated\r\n    # @default -- `\"\"` (defaults to `1`)\r\n    maxSkew: \"\"\r\n    # -- Topology key for spread\r\n    # @default -- `\"\"` (defaults to `topology.kubernetes.io/zone`)\r\n    topologyKey: \"\"\r\n    # -- Enforcement policy, hard or soft\r\n    # @default -- `\"\"` (defaults to `ScheduleAnyway`)\r\n    whenUnsatisfiable: \"\"\r\n  # -- Redis HA statefulset container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    readOnlyRootFilesystem: true\r\n\r\n# External Redis parameters\r\nexternalRedis:\r\n  # -- External Redis server host\r\n  host: \"\"\r\n  # -- External Redis username\r\n  username: \"\"\r\n  # -- External Redis password\r\n  password: \"\"\r\n  # -- External Redis server port\r\n  port: 6379\r\n  # -- The name of an existing secret with Redis credentials (must contain key `redis-password`).\r\n  # When it's set, the `externalRedis.password` parameter is ignored\r\n  existingSecret: \"\"\r\n  # -- External Redis Secret annotations\r\n  secretAnnotations: {}\r\n\r\n## Server\r\nserver:\r\n  # -- Argo CD server name\r\n  name: server\r\n\r\n  # -- The number of server pods to run\r\n  replicas: 1\r\n\r\n  ## Argo CD server Horizontal Pod Autoscaler\r\n  autoscaling:\r\n    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server\r\n    enabled: true\r\n    # -- Minimum number of replicas for the Argo CD server [HPA]\r\n    minReplicas: 1\r\n    # -- Maximum number of replicas for the Argo CD server [HPA]\r\n    maxReplicas: 5\r\n    # -- Average CPU utilization percentage for the Argo CD server [HPA]\r\n    targetCPUUtilizationPercentage: 50\r\n    # -- Average memory utilization percentage for the Argo CD server [HPA]\r\n    targetMemoryUtilizationPercentage: 50\r\n    # -- Configures the scaling behavior of the target in both Up and Down directions.\r\n    behavior: {}\r\n      # scaleDown:\r\n      #  stabilizationWindowSeconds: 300\r\n      #  policies:\r\n      #   - type: Pods\r\n      #     value: 1\r\n      #     periodSeconds: 180\r\n      # scaleUp:\r\n      #   stabilizationWindowSeconds: 300\r\n      #   policies:\r\n      #   - type: Pods\r\n      #     value: 2\r\n      #     periodSeconds: 60\r\n    # -- Configures custom HPA metrics for the Argo CD server\r\n    # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/\r\n    metrics: []\r\n\r\n  ## Argo CD server Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the Argo CD server\r\n    enabled: false\r\n    # -- Labels to be added to Argo CD server pdb\r\n    labels: {}\r\n    # -- Annotations to be added to Argo CD server pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `server.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Argo CD server image\r\n  image:\r\n    # -- Repository to use for the Argo CD server\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\" # defaults to global.image.repository\r\n    # -- Tag to use for the Argo CD server\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\" # defaults to global.image.tag\r\n    # -- Image pull policy for the Argo CD server\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\" # IfNotPresent\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- Additional command line arguments to pass to Argo CD server\r\n  extraArgs: []\r\n\r\n  # -- Environment variables to pass to Argo CD server\r\n  env: []\r\n\r\n  # -- envFrom to pass to Argo CD server\r\n  # @default -- `[]` (See [values.yaml])\r\n  envFrom: []\r\n  # - configMapRef:\r\n  #     name: config-map-name\r\n  # - secretRef:\r\n  #     name: secret-name\r\n\r\n  # -- Specify postStart and preStop lifecycle hooks for your argo-cd-server container\r\n  lifecycle: {}\r\n\r\n  ## Argo UI extensions\r\n  ## This function in tech preview stage, do expect instability or breaking changes in newer versions.\r\n  ## Ref: https://github.com/argoproj-labs/argocd-extensions\r\n  extensions:\r\n    # -- Enable support for Argo UI extensions\r\n    enabled: false\r\n\r\n    ## Argo UI extensions image\r\n    image:\r\n      # -- Repository to use for extensions image\r\n      repository: \"ghcr.io/argoproj-labs/argocd-extensions\"\r\n      # -- Tag to use for extensions image\r\n      tag: \"v0.2.1\"\r\n      # -- Image pull policy for extensions\r\n      # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n      imagePullPolicy: \"\"\r\n\r\n    # -- Server UI extensions container-level security context\r\n    # @default -- See [values.yaml]\r\n    containerSecurityContext:\r\n      runAsNonRoot: true\r\n      readOnlyRootFilesystem: true\r\n      allowPrivilegeEscalation: false\r\n      seccompProfile:\r\n        type: RuntimeDefault\r\n      capabilities:\r\n        drop:\r\n        - ALL\r\n\r\n    # -- Resource limits and requests for the argocd-extensions container\r\n    resources: \r\n      limits:\r\n        cpu: 150m\r\n        memory: 512Mi\r\n      requests:\r\n        cpu: 10m\r\n        memory: 64Mi\r\n\r\n  # -- Additional containers to be added to the server pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n  # - name: my-sidecar\r\n  #   image: nginx:latest\r\n  # - name: lemonldap-ng-controller\r\n  #   image: lemonldapng/lemonldap-ng-controller:0.2.0\r\n  #   args:\r\n  #     - /lemonldap-ng-controller\r\n  #     - --alsologtostderr\r\n  #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\r\n  #   env:\r\n  #     - name: POD_NAME\r\n  #       valueFrom:\r\n  #         fieldRef:\r\n  #           fieldPath: metadata.name\r\n  #     - name: POD_NAMESPACE\r\n  #       valueFrom:\r\n  #         fieldRef:\r\n  #           fieldPath: metadata.namespace\r\n  #   volumeMounts:\r\n  #   - name: copy-portal-skins\r\n  #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins\r\n\r\n  # -- Init containers to add to the server pod\r\n  ## If your target Kubernetes cluster(s) require a custom credential (exec) plugin\r\n  ## you could use this (and the same in the application controller pod) to provide such executable\r\n  ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins\r\n  initContainers: []\r\n  #  - name: download-tools\r\n  #    image: alpine:3\r\n  #    command: [sh, -c]\r\n  #    args:\r\n  #      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip \u0026\u0026\r\n  #        unzip kubelogin.zip \u0026\u0026 mv bin/linux_amd64/kubelogin /custom-tools/\r\n  #    volumeMounts:\r\n  #      - mountPath: /custom-tools\r\n  #        name: custom-tools\r\n\r\n  # -- Additional volumeMounts to the server main container\r\n  volumeMounts: []\r\n  #  - mountPath: /usr/local/bin/kubelogin\r\n  #    name: custom-tools\r\n  #    subPath: kubelogin\r\n\r\n  # -- Additional volumes to the server pod\r\n  volumes: []\r\n  #  - name: custom-tools\r\n  #    emptyDir: {}\r\n\r\n  # -- Annotations to be added to server Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations to be added to server pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be added to server pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for the Argo CD server\r\n  resources: {}\r\n  #  limits:\r\n  #    cpu: 100m\r\n  #    memory: 128Mi\r\n  #  requests:\r\n  #    cpu: 50m\r\n  #    memory: 64Mi\r\n\r\n  # Server container ports\r\n  containerPorts:\r\n    # -- Server container port\r\n    server: 8080\r\n    # -- Metrics container port\r\n    metrics: 8083\r\n\r\n  # -- Host Network for Server pods\r\n  hostNetwork: false\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for Server pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Server container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  ## Readiness and liveness probes for default backend\r\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\r\n  readinessProbe:\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  livenessProbe:\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  # -- Priority class for the Argo CD server pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules to the deployment\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the Argo CD server\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy to be added to the server Deployment\r\n  deploymentStrategy: {}\r\n    # type: RollingUpdate\r\n    # rollingUpdate:\r\n    #   maxSurge: 25%\r\n    #   maxUnavailable: 25%\r\n\r\n  # TLS certificate configuration via cert-manager\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server\r\n  certificate:\r\n    # -- Deploy a Certificate resource (requires cert-manager)\r\n    enabled: false\r\n    # -- The name of the Secret that will be automatically created and managed by this Certificate resource\r\n    secretName: argocd-server-tls\r\n    # -- Certificate primary domain (commonName)\r\n    domain: argocd.example.com\r\n    # -- Certificate Subject Alternate Names (SANs)\r\n    additionalHosts: []\r\n    # -- The requested 'duration' (i.e. lifetime) of the certificate.\r\n    # @default -- `\"\"` (defaults to 2160h = 90d if not specified)\r\n    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal\r\n    duration: \"\"\r\n    # -- How long before the expiry a certificate should be renewed.\r\n    # @default -- `\"\"` (defaults to 360h = 15d if not specified)\r\n    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal\r\n    renewBefore: \"\"\r\n    # Certificate issuer\r\n    ## Ref: https://cert-manager.io/docs/concepts/issuer\r\n    issuer:\r\n      # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`\r\n      group: \"\"\r\n      # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`\r\n      kind: \"\"\r\n      # -- Certificate issuer name. Eg. `letsencrypt`\r\n      name: \"\"\r\n    # Private key of the certificate\r\n    privateKey:\r\n      # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`\r\n      rotationPolicy: Never\r\n      # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`\r\n      encoding: PKCS1\r\n      # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`\r\n      algorithm: RSA\r\n      # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.\r\n      size: 2048\r\n    # -- Annotations to be applied to the Server Certificate\r\n    annotations: {}\r\n    # -- Usages for the certificate\r\n    ### Ref: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage\r\n    usages: []\r\n\r\n  # TLS certificate configuration via Secret\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server\r\n  certificateSecret:\r\n    # -- Create argocd-server-tls secret\r\n    enabled: false\r\n    # -- Annotations to be added to argocd-server-tls secret\r\n    annotations: {}\r\n    # -- Labels to be added to argocd-server-tls secret\r\n    labels: {}\r\n    # -- Private Key of the certificate\r\n    key: ''\r\n    # -- Certificate data\r\n    crt: ''\r\n\r\n  ## Server service configuration\r\n  service:\r\n    # -- Server service annotations\r\n    annotations: {}\r\n    # -- Server service labels\r\n    labels: {}\r\n    # -- Server service type\r\n    type: ClusterIP\r\n    # -- Server service http port for NodePort service type (only if `server.service.type` is set to \"NodePort\")\r\n    nodePortHttp: 30080\r\n    # -- Server service https port for NodePort service type (only if `server.service.type` is set to \"NodePort\")\r\n    nodePortHttps: 30443\r\n    # -- Server service http port\r\n    servicePortHttp: 80\r\n    # -- Server service https port\r\n    servicePortHttps: 443\r\n    # -- Server service http port name, can be used to route traffic via istio\r\n    servicePortHttpName: http\r\n    # -- Server service https port name, can be used to route traffic via istio\r\n    servicePortHttpsName: https\r\n    # -- Server service https port appProtocol. (should be upper case - i.e. HTTPS)\r\n    # servicePortHttpsAppProtocol: HTTPS\r\n    # -- LoadBalancer will get created with the IP specified in this field\r\n    loadBalancerIP: \"\"\r\n    # -- Source IP ranges to allow access to service from\r\n    loadBalancerSourceRanges: []\r\n    # -- Server service external IPs\r\n    externalIPs: []\r\n    # -- Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints\r\n    externalTrafficPolicy: \"\"\r\n    # -- Used to maintain session affinity. Supports `ClientIP` and `None`\r\n    sessionAffinity: \"\"\r\n\r\n  ## Server metrics service configuration\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: \"\"\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port\r\n      servicePort: 8083\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor interval\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\"  # monitoring\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n\r\n  serviceAccount:\r\n    # -- Create server service account\r\n    create: true\r\n    # -- Server service account name\r\n    name: argocd-server\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Labels applied to created service account\r\n    labels: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  ingress:\r\n    # -- Enable an ingress resource for the Argo CD server\r\n    enabled: false\r\n    # -- Additional ingress annotations\r\n    annotations: {}\r\n    # -- Additional ingress labels\r\n    labels: {}\r\n    # -- Defines which ingress controller will implement the resource\r\n    ingressClassName: \"\"\r\n\r\n    # -- List of ingress hosts\r\n    ## Argo Ingress.\r\n    ## Hostnames must be provided if Ingress is enabled.\r\n    ## Secrets must be manually created in the namespace\r\n    hosts: []\r\n      # - argocd.example.com\r\n\r\n    # -- List of ingress paths\r\n    paths:\r\n      - /\r\n    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`\r\n    pathType: Prefix\r\n    # -- Additional ingress paths\r\n    extraPaths: []\r\n      # - path: /*\r\n      #   pathType: Prefix\r\n      #   backend:\r\n      #     service:\r\n      #       name: ssl-redirect\r\n      #       port:\r\n      #         name: use-annotation\r\n\r\n    # -- Ingress TLS configuration\r\n    tls: []\r\n      # - secretName: your-certificate-name\r\n      #   hosts:\r\n      #     - argocd.example.com\r\n\r\n    # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`\r\n    https: false\r\n\r\n  # dedicated ingress for gRPC as documented at\r\n  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/\r\n  ingressGrpc:\r\n    # -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]\r\n    enabled: false\r\n    # -- Setup up gRPC ingress to work with an AWS ALB\r\n    isAWSALB: false\r\n    # -- Additional ingress annotations for dedicated [gRPC-ingress]\r\n    annotations: {}\r\n    # -- Additional ingress labels for dedicated [gRPC-ingress]\r\n    labels: {}\r\n    # -- Defines which ingress controller will implement the resource [gRPC-ingress]\r\n    ingressClassName: \"\"\r\n\r\n    awsALB:\r\n      # -- Service type for the AWS ALB gRPC service\r\n      ## Service Type if isAWSALB is set to true\r\n      ## Can be of type NodePort or ClusterIP depending on which mode you are\r\n      ## are running. Instance mode needs type NodePort, IP mode needs type\r\n      ## ClusterIP\r\n      ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic\r\n      serviceType: NodePort\r\n      # -- Backend protocol version for the AWS ALB gRPC service\r\n      ## This tells AWS to send traffic from the ALB using HTTP2. Can use gRPC as well if you want to leverage gRPC specific features\r\n      backendProtocolVersion: HTTP2\r\n\r\n    # -- List of ingress hosts for dedicated [gRPC-ingress]\r\n    ## Argo Ingress.\r\n    ## Hostnames must be provided if Ingress is enabled.\r\n    ## Secrets must be manually created in the namespace\r\n    ##\r\n    hosts: []\r\n      # - argocd.example.com\r\n\r\n    # -- List of ingress paths for dedicated [gRPC-ingress]\r\n    paths:\r\n      - /\r\n    # -- Ingress path type for dedicated [gRPC-ingress]. One of `Exact`, `Prefix` or `ImplementationSpecific`\r\n    pathType: Prefix\r\n    # -- Additional ingress paths for dedicated [gRPC-ingress]\r\n    extraPaths: []\r\n      # - path: /*\r\n      #   pathType: Prefix\r\n      #   backend:\r\n      #     service:\r\n      #       name: ssl-redirect\r\n      #       port:\r\n      #         name: use-annotation\r\n\r\n    # -- Ingress TLS configuration for dedicated [gRPC-ingress]\r\n    tls: []\r\n      # - secretName: your-certificate-name\r\n      #   hosts:\r\n      #     - argocd.example.com\r\n\r\n    # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`\r\n    https: false\r\n\r\n  # Create a OpenShift Route with SSL passthrough for UI and CLI\r\n  # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain\r\n  # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:\r\n  # If 'hostname' is an empty string \"\" OpenShift will create a hostname for you.\r\n  route:\r\n    # -- Enable an OpenShift Route for the Argo CD server\r\n    enabled: false\r\n    # -- Openshift Route annotations\r\n    annotations: {}\r\n    # -- Hostname of OpenShift Route\r\n    hostname: \"\"\r\n    # -- Termination type of Openshift Route\r\n    termination_type: passthrough\r\n    # -- Termination policy of Openshift Route\r\n    termination_policy: None\r\n\r\n  GKEbackendConfig:\r\n    # -- Enable BackendConfig custom resource for Google Kubernetes Engine\r\n    enabled: false\r\n    # -- [BackendConfigSpec]\r\n    spec: {}\r\n  #  spec:\r\n  #    iap:\r\n  #      enabled: true\r\n  #      oauthclientCredentials:\r\n  #        secretName: argocd-secret\r\n\r\n  ## Create a Google Managed Certificate for use with the GKE Ingress Controller\r\n  ## https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs\r\n  GKEmanagedCertificate:\r\n    # -- Enable ManagedCertificate custom resource for Google Kubernetes Engine.\r\n    enabled: false\r\n    # -- Domains for the Google Managed Certificate\r\n    domains:\r\n    - argocd.example.com\r\n\r\n  ## Create a Google FrontendConfig Custom Resource, for use with the GKE Ingress Controller\r\n  ## https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters\r\n  GKEfrontendConfig:\r\n    # -- Enable FrontConfig custom resource for Google Kubernetes Engine\r\n    enabled: false\r\n    # -- [FrontendConfigSpec]\r\n    spec: {}\r\n  # spec:\r\n  #   redirectToHttps:\r\n  #     enabled: true\r\n  #     responseCodeName: RESPONSE_CODE\r\n\r\n## Repo Server\r\nrepoServer:\r\n  # -- Repo server name\r\n  name: repo-server\r\n\r\n  # -- The number of repo server pods to run\r\n  replicas: 1\r\n\r\n  ## Repo server Horizontal Pod Autoscaler\r\n  autoscaling:\r\n    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server\r\n    enabled: true\r\n    # -- Minimum number of replicas for the repo server [HPA]\r\n    minReplicas: 1\r\n    # -- Maximum number of replicas for the repo server [HPA]\r\n    maxReplicas: 5\r\n    # -- Average CPU utilization percentage for the repo server [HPA]\r\n    targetCPUUtilizationPercentage: 50\r\n    # -- Average memory utilization percentage for the repo server [HPA]\r\n    targetMemoryUtilizationPercentage: 50\r\n    # -- Configures the scaling behavior of the target in both Up and Down directions.\r\n    behavior: {}\r\n      # scaleDown:\r\n      #  stabilizationWindowSeconds: 300\r\n      #  policies:\r\n      #   - type: Pods\r\n      #     value: 1\r\n      #     periodSeconds: 180\r\n      # scaleUp:\r\n      #   stabilizationWindowSeconds: 300\r\n      #   policies:\r\n      #   - type: Pods\r\n      #     value: 2\r\n      #     periodSeconds: 60\r\n    # -- Configures custom HPA metrics for the Argo CD repo server\r\n    # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/\r\n    metrics: []\r\n\r\n  ## Repo server Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the repo server\r\n    enabled: false\r\n    # -- Labels to be added to repo server pdb\r\n    labels: {}\r\n    # -- Annotations to be added to repo server pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `repoServer.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Repo server image\r\n  image:\r\n    # -- Repository to use for the repo server\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\"\r\n    # -- Tag to use for the repo server\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\"\r\n    # -- Image pull policy for the repo server\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- Additional command line arguments to pass to repo server\r\n  extraArgs: []\r\n\r\n  # -- Environment variables to pass to repo server\r\n  env: []\r\n\r\n  # -- envFrom to pass to repo server\r\n  # @default -- `[]` (See [values.yaml])\r\n  envFrom: []\r\n  # - configMapRef:\r\n  #     name: config-map-name\r\n  # - secretRef:\r\n  #     name: secret-name\r\n\r\n  # -- Specify postStart and preStop lifecycle hooks for your argo-repo-server container\r\n  lifecycle: {}\r\n\r\n  # -- Additional containers to be added to the repo server pod\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n    # - name: cmp-my-plugin\r\n    #   command:\r\n    #     - \"/var/run/argocd/argocd-cmp-server\"\r\n    #   image: busybox\r\n    #   securityContext:\r\n    #     runAsNonRoot: true\r\n    #     runAsUser: 999\r\n    #   volumeMounts:\r\n    #     - mountPath: /var/run/argocd\r\n    #       name: var-files\r\n    #     - mountPath: /home/argocd/cmp-server/plugins\r\n    #       name: plugins\r\n    #     # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.\r\n    #     - mountPath: /home/argocd/cmp-server/config/plugin.yaml\r\n    #       subPath: my-plugin.yaml\r\n    #       name: argocd-cmp-cm\r\n    #     # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps\r\n    #     # mitigate path traversal attacks.\r\n    #     - mountPath: /tmp\r\n    #       name: cmp-tmp\r\n    # - name: cmp-my-plugin2\r\n    #   command:\r\n    #     - \"/var/run/argocd/argocd-cmp-server\"\r\n    #   image: busybox\r\n    #   securityContext:\r\n    #     runAsNonRoot: true\r\n    #     runAsUser: 999\r\n    #   volumeMounts:\r\n    #     - mountPath: /var/run/argocd\r\n    #       name: var-files\r\n    #     # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.\r\n    #     - mountPath: /home/argocd/cmp-server/plugins\r\n    #       name: plugins\r\n    #     - mountPath: /home/argocd/cmp-server/config/plugin.yaml\r\n    #       subPath: my-plugin2.yaml\r\n    #       name: argocd-cmp-cm\r\n    #     # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps\r\n    #     # mitigate path traversal attacks.\r\n    #     - mountPath: /tmp\r\n    #       name: cmp-tmp\r\n\r\n  # -- Init containers to add to the repo server pods\r\n  initContainers: []\r\n\r\n  # -- Additional volumeMounts to the repo server main container\r\n  volumeMounts: []\r\n\r\n  # -- Additional volumes to the repo server pod\r\n  volumes: []\r\n  #  - name: argocd-cmp-cm\r\n  #    configMap:\r\n  #      name: argocd-cmp-cm\r\n  #  - name: cmp-tmp\r\n  #    emptyDir: {}\r\n\r\n  # -- Toggle the usage of a ephemeral Helm working directory\r\n  useEphemeralHelmWorkingDir: true\r\n\r\n  # -- Annotations to be added to repo server Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations to be added to repo server pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be added to repo server pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for the repo server pods\r\n  resources: \r\n    limits:\r\n      cpu: 500m\r\n      memory: 1024Mi\r\n    requests:\r\n      cpu: 10m\r\n      memory: 64Mi\r\n\r\n  # Repo server container ports\r\n  containerPorts:\r\n    # -- Repo server container port\r\n    server: 8081\r\n    # -- Metrics container port\r\n    metrics: 8084\r\n\r\n  # -- Host Network for Repo server pods\r\n  hostNetwork: false\r\n\r\n    # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for Repo server pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Repo server container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  ## Readiness and liveness probes for default backend\r\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\r\n  readinessProbe:\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  livenessProbe:\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules to the deployment\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the repo server\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy to be added to the repo server Deployment\r\n  deploymentStrategy: {}\r\n    # type: RollingUpdate\r\n    # rollingUpdate:\r\n    #   maxSurge: 25%\r\n    #   maxUnavailable: 25%\r\n\r\n  # -- Priority class for the repo server pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  # TLS certificate configuration via Secret\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server\r\n  ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.\r\n  certificateSecret:\r\n    # -- Create argocd-repo-server-tls secret\r\n    enabled: false\r\n    # -- Annotations to be added to argocd-repo-server-tls secret\r\n    annotations: {}\r\n    # -- Labels to be added to argocd-repo-server-tls secret\r\n    labels: {}\r\n    # -- Certificate authority. Required for self-signed certificates.\r\n    ca: ''\r\n    # -- Certificate private key\r\n    key: ''\r\n    # -- Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)\r\n    crt: ''\r\n\r\n  ## Repo server service configuration\r\n  service:\r\n    # -- Repo server service annotations\r\n    annotations: {}\r\n    # -- Repo server service labels\r\n    labels: {}\r\n    # -- Repo server service port\r\n    port: 8081\r\n    # -- Repo server service port name\r\n    portName: https-repo-server\r\n\r\n  ## Repo server metrics service configuration\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: \"\"\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port\r\n      servicePort: 8084\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor interval\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\" # \"monitoring\"\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n\r\n  ## Enable Custom Rules for the Repo server's Cluster Role resource\r\n  ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\r\n  ## Defaults to off\r\n  clusterRoleRules:\r\n    # -- Enable custom rules for the Repo server's Cluster Role resource\r\n    enabled: false\r\n    # -- List of custom rules for the Repo server's Cluster Role resource\r\n    rules: []\r\n\r\n  ## Repo server service account\r\n  ## If create is set to true, make sure to uncomment the name and update the rbac section below\r\n  serviceAccount:\r\n    # -- Create repo server service account\r\n    create: true\r\n    # -- Repo server service account name\r\n    name: \"\" # \"argocd-repo-server\"\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Labels applied to created service account\r\n    labels: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  # -- Repo server rbac rules\r\n  rbac: []\r\n  #   - apiGroups:\r\n  #     - argoproj.io\r\n  #     resources:\r\n  #     - applications\r\n  #     verbs:\r\n  #     - get\r\n  #     - list\r\n  #     - watch\r\n\r\n## ApplicationSet controller\r\napplicationSet:\r\n  # -- Enable ApplicationSet controller\r\n  enabled: true\r\n\r\n  # -- ApplicationSet controller name string\r\n  name: applicationset-controller\r\n\r\n  # -- The number of ApplicationSet controller pods to run\r\n  replicas: 2\r\n\r\n  ## ApplicationSet controller Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the ApplicationSet controller\r\n    enabled: false\r\n    # -- Labels to be added to ApplicationSet controller pdb\r\n    labels: {}\r\n    # -- Annotations to be added to ApplicationSet controller pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `applicationSet.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## ApplicationSet controller image\r\n  image:\r\n    # -- Repository to use for the ApplicationSet controller\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\"\r\n    # -- Tag to use for the ApplicationSet controller\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\"\r\n    # -- Image pull policy for the ApplicationSet controller\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  # -- If defined, uses a Secret to pull an image from a private Docker registry or repository.\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- DEPRECATED - ApplicationSet controller command line flags\r\n  args: {}\r\n    # DEPRECATED - Use configs.params.applicationsetcontroller.policy to override\r\n    # -- How application is synced between the generator and the cluster\r\n    # policy: sync\r\n    # DEPRECATED - Use configs.params.applicationsetcontroller.dryrun to override\r\n    # -- Enable dry run mode\r\n    # dryRun: false\r\n\r\n  # -- List of extra cli args to add\r\n  extraArgs: []\r\n\r\n  # -- Environment variables to pass to the ApplicationSet controller\r\n  extraEnv: []\r\n    # - name: \"MY_VAR\"\r\n    #   value: \"value\"\r\n\r\n  # -- envFrom to pass to the ApplicationSet controller\r\n  # @default -- `[]` (See [values.yaml])\r\n  extraEnvFrom: []\r\n    # - configMapRef:\r\n    #     name: config-map-name\r\n    # - secretRef:\r\n    #     name: secret-name\r\n\r\n  # -- Additional containers to be added to the ApplicationSet controller pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n\r\n  # -- Init containers to add to the ApplicationSet controller pod\r\n  ## Note: Supports use of custom Helm templates\r\n  initContainers: []\r\n\r\n  # -- List of extra mounts to add (normally used with extraVolumes)\r\n  extraVolumeMounts: []\r\n\r\n  # -- List of extra volumes to add\r\n  extraVolumes: []\r\n\r\n  ## Metrics service configuration\r\n  metrics:\r\n    # -- Deploy metrics service\r\n    enabled: false\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: \"\"\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port\r\n      servicePort: 8080\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor interval\r\n      interval: 30s\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus ServiceMonitor namespace\r\n      namespace: \"\"  # monitoring\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n\r\n  ## ApplicationSet service configuration\r\n  service:\r\n    # -- ApplicationSet service annotations\r\n    annotations: {}\r\n    # -- ApplicationSet service labels\r\n    labels: {}\r\n    # -- ApplicationSet service type\r\n    type: ClusterIP\r\n    # -- ApplicationSet service port\r\n    port: 7000\r\n    # -- ApplicationSet service port name\r\n    portName: webhook\r\n\r\n  serviceAccount:\r\n    # -- Create ApplicationSet controller service account\r\n    create: true\r\n    # -- ApplicationSet controller service account name\r\n    name: argocd-applicationset-controller\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Labels applied to created service account\r\n    labels: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  # -- Annotations to be added to ApplicationSet controller Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations for the ApplicationSet controller pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels for the ApplicationSet controller pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for the ApplicationSet controller pods.\r\n  resources: {}\r\n    # limits:\r\n    #   cpu: 100m\r\n    #   memory: 128Mi\r\n    # requests:\r\n    #   cpu: 100m\r\n    #   memory: 128Mi\r\n\r\n  # ApplicationSet controller container ports\r\n  containerPorts:\r\n    # -- Metrics container port\r\n    metrics: 8080\r\n    # -- Probe container port\r\n    probe: 8081\r\n    # -- Webhook container port\r\n    webhook: 7000\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for ApplicationSet controller pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- ApplicationSet controller container-level security context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  ## Probes for ApplicationSet controller (optional)\r\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\r\n  readinessProbe:\r\n    # -- Enable Kubernetes liveness probe for ApplicationSet controller\r\n    enabled: false\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n\r\n  livenessProbe:\r\n    # -- Enable Kubernetes liveness probe for ApplicationSet controller\r\n    enabled: false\r\n    # -- Number of seconds after the container has started before [probe] is initiated\r\n    initialDelaySeconds: 10\r\n    # -- How often (in seconds) to perform the [probe]\r\n    periodSeconds: 10\r\n    # -- Number of seconds after which the [probe] times out\r\n    timeoutSeconds: 1\r\n    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed\r\n    successThreshold: 1\r\n    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded\r\n    failureThreshold: 3\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the ApplicationSet controller\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy to be added to the ApplicationSet controller Deployment\r\n  deploymentStrategy: {}\r\n    # type: RollingUpdate\r\n    # rollingUpdate:\r\n    #   maxSurge: 25%\r\n    #   maxUnavailable: 25%\r\n\r\n  # -- Priority class for the ApplicationSet controller pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  ## Webhook for the Git Generator\r\n  ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)\r\n  webhook:\r\n    ingress:\r\n      # -- Enable an ingress resource for Webhooks\r\n      enabled: false\r\n      # -- Additional ingress annotations\r\n      annotations: {}\r\n      # -- Additional ingress labels\r\n      labels: {}\r\n      # -- Defines which ingress ApplicationSet controller will implement the resource\r\n      ingressClassName: \"\"\r\n\r\n      # -- List of ingress hosts\r\n      ## Hostnames must be provided if Ingress is enabled.\r\n      ## Secrets must be manually created in the namespace\r\n      hosts: []\r\n        # - argocd-applicationset.example.com\r\n\r\n      # -- List of ingress paths\r\n      paths:\r\n        - /api/webhook\r\n      # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`\r\n      pathType: Prefix\r\n      # -- Additional ingress paths\r\n      extraPaths: []\r\n        # - path: /*\r\n        #   backend:\r\n        #     serviceName: ssl-redirect\r\n        #     servicePort: use-annotation\r\n        ## for Kubernetes \u003e=1.19 (when \"networking.k8s.io/v1\" is used)\r\n        # - path: /*\r\n        #   pathType: Prefix\r\n        #   backend:\r\n        #     service:\r\n        #       name: ssl-redirect\r\n        #       port:\r\n        #         name: use-annotation\r\n\r\n      # -- Ingress TLS configuration\r\n      tls: []\r\n        # - secretName: argocd-applicationset-tls\r\n        #   hosts:\r\n        #     - argocd-applicationset.example.com\r\n\r\n  # TLS certificate configuration via cert-manager\r\n  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration\r\n  certificate:\r\n    # -- Deploy a Certificate resource (requires cert-manager)\r\n    enabled: false\r\n    # -- The name of the Secret that will be automatically created and managed by this Certificate resource\r\n    secretName: argocd-application-controller-tls\r\n    # -- Certificate primary domain (commonName)\r\n    domain: argocd.example.com\r\n    # -- Certificate Subject Alternate Names (SANs)\r\n    additionalHosts: []\r\n    # -- The requested 'duration' (i.e. lifetime) of the certificate.\r\n    # @default -- `\"\"` (defaults to 2160h = 90d if not specified)\r\n    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal\r\n    duration: \"\"\r\n    # -- How long before the expiry a certificate should be renewed.\r\n    # @default -- `\"\"` (defaults to 360h = 15d if not specified)\r\n    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal\r\n    renewBefore: \"\"\r\n    # Certificate issuer\r\n    ## Ref: https://cert-manager.io/docs/concepts/issuer\r\n    issuer:\r\n      # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`\r\n      group: \"\"\r\n      # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`\r\n      kind: \"\"\r\n      # -- Certificate issuer name. Eg. `letsencrypt`\r\n      name: \"\"\r\n    # Private key of the certificate\r\n    privateKey:\r\n      # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`\r\n      rotationPolicy: Never\r\n      # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`\r\n      encoding: PKCS1\r\n      # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`\r\n      algorithm: RSA\r\n      # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.\r\n      size: 2048\r\n    # -- Annotations to be applied to the ApplicationSet Certificate\r\n    annotations: {}\r\n\r\n## Notifications controller\r\nnotifications:\r\n  # -- Enable notifications controller\r\n  enabled: true\r\n\r\n  # -- Notifications controller name string\r\n  name: notifications-controller\r\n\r\n  # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates\r\n  argocdUrl:\r\n\r\n  ## Notifications controller Pod Disruption Budget\r\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\r\n  pdb:\r\n    # -- Deploy a [PodDisruptionBudget] for the notifications controller\r\n    enabled: false\r\n    # -- Labels to be added to notifications controller pdb\r\n    labels: {}\r\n    # -- Annotations to be added to notifications controller pdb\r\n    annotations: {}\r\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\r\n    # @default -- `\"\"` (defaults to 0 if not specified)\r\n    minAvailable: \"\"\r\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\r\n    ## Has higher precedence over `notifications.pdb.minAvailable`\r\n    maxUnavailable: \"\"\r\n\r\n  ## Notifications controller image\r\n  image:\r\n    # -- Repository to use for the notifications controller\r\n    # @default -- `\"\"` (defaults to global.image.repository)\r\n    repository: \"\"\r\n    # -- Tag to use for the notifications controller\r\n    # @default -- `\"\"` (defaults to global.image.tag)\r\n    tag: \"\"\r\n    # -- Image pull policy for the notifications controller\r\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\r\n    imagePullPolicy: \"\"\r\n\r\n  # -- Secrets with credentials to pull images from a private registry\r\n  # @default -- `[]` (defaults to global.imagePullSecrets)\r\n  imagePullSecrets: []\r\n\r\n  # -- Notifications controller log format. Either `text` or `json`\r\n  # @default -- `\"\"` (defaults to global.logging.format)\r\n  logFormat: \"\"\r\n  # -- Notifications controller log level. One of: `debug`, `info`, `warn`, `error`\r\n  # @default -- `\"\"` (defaults to global.logging.level)\r\n  logLevel: \"\"\r\n\r\n  # -- Extra arguments to provide to the notifications controller\r\n  extraArgs: []\r\n\r\n  # -- Additional container environment variables\r\n  extraEnv: []\r\n\r\n  # -- envFrom to pass to the notifications controller\r\n  # @default -- `[]` (See [values.yaml])\r\n  extraEnvFrom: []\r\n    # - configMapRef:\r\n    #     name: config-map-name\r\n    # - secretRef:\r\n    #     name: secret-name\r\n\r\n  # -- Additional containers to be added to the notifications controller pod\r\n  ## Note: Supports use of custom Helm templates\r\n  extraContainers: []\r\n\r\n  # -- Init containers to add to the notifications controller pod\r\n  ## Note: Supports use of custom Helm templates\r\n  initContainers: []\r\n\r\n  # -- List of extra mounts to add (normally used with extraVolumes)\r\n  extraVolumeMounts: []\r\n\r\n  # -- List of extra volumes to add\r\n  extraVolumes: []\r\n\r\n  # -- Define user-defined context\r\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context\r\n  context: {}\r\n    # region: east\r\n    # environmentName: staging\r\n\r\n  secret:\r\n    # -- Whether helm chart creates notifications controller secret\r\n    create: true\r\n\r\n    # -- key:value pairs of annotations to be added to the secret\r\n    annotations: {}\r\n\r\n    # -- key:value pairs of labels to be added to the secret\r\n    labels: {}\r\n\r\n    # -- Generic key:value pairs to be inserted into the secret\r\n    ## Can be used for templates, notification services etc. Some examples given below.\r\n    ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/\r\n    items: {}\r\n      # slack-token:\r\n      #   # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/slack/\r\n\r\n      # grafana-apiKey:\r\n      #   # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/grafana/\r\n\r\n      # webhooks-github-token:\r\n\r\n      # email-username:\r\n      # email-password:\r\n        # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/email/\r\n\r\n  metrics:\r\n    # -- Enables prometheus metrics server\r\n    enabled: false\r\n    # -- Metrics port\r\n    port: 9001\r\n    service:\r\n      # -- Metrics service type\r\n      type: ClusterIP\r\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\r\n      clusterIP: \"\"\r\n      # -- Metrics service annotations\r\n      annotations: {}\r\n      # -- Metrics service labels\r\n      labels: {}\r\n      # -- Metrics service port name\r\n      portName: http-metrics\r\n    serviceMonitor:\r\n      # -- Enable a prometheus ServiceMonitor\r\n      enabled: false\r\n      # -- Prometheus ServiceMonitor selector\r\n      selector: {}\r\n        # prometheus: kube-prometheus\r\n      # -- Prometheus ServiceMonitor labels\r\n      additionalLabels: {}\r\n      # -- Prometheus ServiceMonitor annotations\r\n      annotations: {}\r\n      # namespace: monitoring\r\n      # interval: 30s\r\n      # scrapeTimeout: 10s\r\n      # -- Prometheus ServiceMonitor scheme\r\n      scheme: \"\"\r\n      # -- Prometheus ServiceMonitor tlsConfig\r\n      tlsConfig: {}\r\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\r\n      relabelings: []\r\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\r\n      metricRelabelings: []\r\n\r\n  # -- Configures notification services such as slack, email or custom webhook\r\n  # @default -- See [values.yaml]\r\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/\r\n  notifiers: {}\r\n    # service.slack: |\r\n    #   token: $slack-token\r\n\r\n  # -- Annotations to be applied to the notifications controller Deployment\r\n  deploymentAnnotations: {}\r\n\r\n  # -- Annotations to be applied to the notifications controller Pods\r\n  podAnnotations: {}\r\n\r\n  # -- Labels to be applied to the notifications controller Pods\r\n  podLabels: {}\r\n\r\n  # -- Resource limits and requests for the notifications controller\r\n  resources: {}\r\n    # limits:\r\n    #   cpu: 100m\r\n    #   memory: 128Mi\r\n    # requests:\r\n    #   cpu: 100m\r\n    #   memory: 128Mi\r\n\r\n  # Notification controller container ports\r\n  containerPorts:\r\n    # -- Metrics container port\r\n    metrics: 9001\r\n\r\n  # -- [DNS configuration]\r\n  dnsConfig: {}\r\n  # -- Alternative DNS policy for notifications controller Pods\r\n  dnsPolicy: \"ClusterFirst\"\r\n\r\n  # -- Notification controller container-level security Context\r\n  # @default -- See [values.yaml]\r\n  containerSecurityContext:\r\n    runAsNonRoot: true\r\n    readOnlyRootFilesystem: true\r\n    allowPrivilegeEscalation: false\r\n    seccompProfile:\r\n      type: RuntimeDefault\r\n    capabilities:\r\n      drop:\r\n      - ALL\r\n\r\n  # -- [Node selector]\r\n  # @default -- `{}` (defaults to global.nodeSelector)\r\n  nodeSelector: {}\r\n\r\n  # -- [Tolerations] for use with node taints\r\n  # @default -- `[]` (defaults to global.tolerations)\r\n  tolerations: []\r\n\r\n  # -- Assign custom [affinity] rules\r\n  # @default -- `{}` (defaults to global.affinity preset)\r\n  affinity: {}\r\n\r\n  # -- Assign custom [TopologySpreadConstraints] rules to the application controller\r\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\r\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\r\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\r\n  topologySpreadConstraints: []\r\n    # - maxSkew: 1\r\n    #   topologyKey: topology.kubernetes.io/zone\r\n    #   whenUnsatisfiable: DoNotSchedule\r\n\r\n  # -- Deployment strategy to be added to the notifications controller Deployment\r\n  deploymentStrategy:\r\n    type: Recreate\r\n\r\n  # -- Priority class for the notifications controller pods\r\n  # @default -- `\"\"` (defaults to global.priorityClassName)\r\n  priorityClassName: \"\"\r\n\r\n  serviceAccount:\r\n    # -- Create notifications controller service account\r\n    create: true\r\n    # -- Notification controller service account name\r\n    name: argocd-notifications-controller\r\n    # -- Annotations applied to created service account\r\n    annotations: {}\r\n    # -- Labels applied to created service account\r\n    labels: {}\r\n    # -- Automount API credentials for the Service Account\r\n    automountServiceAccountToken: true\r\n\r\n  cm:\r\n    # -- Whether helm chart creates notifications controller config map\r\n    create: true\r\n\r\n  # -- Contains centrally managed global application subscriptions\r\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/\r\n  subscriptions: []\r\n    # # subscription for on-sync-status-unknown trigger notifications\r\n    # - recipients:\r\n    #   - slack:test2\r\n    #   - email:test@gmail.com\r\n    #   triggers:\r\n    #   - on-sync-status-unknown\r\n    # # subscription restricted to applications with matching labels only\r\n    # - recipients:\r\n    #   - slack:test3\r\n    #   selector: test=true\r\n    #   triggers:\r\n    #   - on-sync-status-unknown\r\n\r\n  # -- The notification template is used to generate the notification content\r\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/\r\n  templates: {}\r\n    # template.app-deployed: |\r\n    #   email:\r\n    #     subject: New version of an application {{.app.metadata.name}} is up and running.\r\n    #   message: |\r\n    #     {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\r\n    #   slack:\r\n    #     attachments: |\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#18be52\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Revision\",\r\n    #           \"value\": \"{{.app.status.sync.revision}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n    # template.app-health-degraded: |\r\n    #   email:\r\n    #     subject: Application {{.app.metadata.name}} has degraded.\r\n    #   message: |\r\n    #     {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\r\n    #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\r\n    #   slack:\r\n    #     attachments: |-\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#f4c030\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n    # template.app-sync-failed: |\r\n    #   email:\r\n    #     subject: Failed to sync application {{.app.metadata.name}}.\r\n    #   message: |\r\n    #     {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\r\n    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\r\n    #   slack:\r\n    #     attachments: |-\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#E96D76\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n    # template.app-sync-running: |\r\n    #   email:\r\n    #     subject: Start syncing application {{.app.metadata.name}}.\r\n    #   message: |\r\n    #     The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\r\n    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\r\n    #   slack:\r\n    #     attachments: |-\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#0DADEA\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n    # template.app-sync-status-unknown: |\r\n    #   email:\r\n    #     subject: Application {{.app.metadata.name}} sync status is 'Unknown'\r\n    #   message: |\r\n    #     {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\r\n    #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\r\n    #     {{if ne .serviceType \"slack\"}}\r\n    #     {{range $c := .app.status.conditions}}\r\n    #         * {{$c.message}}\r\n    #     {{end}}\r\n    #     {{end}}\r\n    #   slack:\r\n    #     attachments: |-\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#E96D76\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n    # template.app-sync-succeeded: |\r\n    #   email:\r\n    #     subject: Application {{.app.metadata.name}} has been successfully synced.\r\n    #   message: |\r\n    #     {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\r\n    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\r\n    #   slack:\r\n    #     attachments: |-\r\n    #       [{\r\n    #         \"title\": \"{{ .app.metadata.name}}\",\r\n    #         \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\r\n    #         \"color\": \"#18be52\",\r\n    #         \"fields\": [\r\n    #         {\r\n    #           \"title\": \"Sync Status\",\r\n    #           \"value\": \"{{.app.status.sync.status}}\",\r\n    #           \"short\": true\r\n    #         },\r\n    #         {\r\n    #           \"title\": \"Repository\",\r\n    #           \"value\": \"{{.app.spec.source.repoURL}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{range $index, $c := .app.status.conditions}}\r\n    #         {{if not $index}},{{end}}\r\n    #         {{if $index}},{{end}}\r\n    #         {\r\n    #           \"title\": \"{{$c.type}}\",\r\n    #           \"value\": \"{{$c.message}}\",\r\n    #           \"short\": true\r\n    #         }\r\n    #         {{end}}\r\n    #         ]\r\n    #       }]\r\n\r\n  # -- The trigger defines the condition when the notification should be sent\r\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/\r\n  triggers: {}\r\n    # trigger.on-deployed: |\r\n    #   - description: Application is synced and healthy. Triggered once per commit.\r\n    #     oncePer: app.status.sync.revision\r\n    #     send:\r\n    #     - app-deployed\r\n    #     when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\r\n    # trigger.on-health-degraded: |\r\n    #   - description: Application has degraded\r\n    #     send:\r\n    #     - app-health-degraded\r\n    #     when: app.status.health.status == 'Degraded'\r\n    # trigger.on-sync-failed: |\r\n    #   - description: Application syncing has failed\r\n    #     send:\r\n    #     - app-sync-failed\r\n    #     when: app.status.operationState.phase in ['Error', 'Failed']\r\n    # trigger.on-sync-running: |\r\n    #   - description: Application is being synced\r\n    #     send:\r\n    #     - app-sync-running\r\n    #     when: app.status.operationState.phase in ['Running']\r\n    # trigger.on-sync-status-unknown: |\r\n    #   - description: Application status is 'Unknown'\r\n    #     send:\r\n    #     - app-sync-status-unknown\r\n    #     when: app.status.sync.status == 'Unknown'\r\n    # trigger.on-sync-succeeded: |\r\n    #   - description: Application syncing has succeeded\r\n    #     send:\r\n    #     - app-sync-succeeded\r\n    #     when: app.status.operationState.phase in ['Succeeded']\r\n    #\r\n    # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/#default-triggers\r\n    # defaultTriggers: |\r\n    #   - on-sync-status-unknown\r\n"
            ],
            "verify": false,
            "version": "5.51.6",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "grafana-prometheus",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "grafana-prometheus",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.71.0",
                "chart": "kube-prometheus-stack",
                "name": "grafana-prometheus",
                "namespace": "grafana-prometheus",
                "revision": 4,
                "values": "{\"alertmanager\":{\"enabled\":true,\"fullnameOverride\":\"alertmanager\",\"ingress\":{\"enabled\":false}},\"coreDns\":{\"enabled\":true},\"defaultRules\":{\"create\":true,\"rules\":{\"alertmanager\":true,\"configReloaders\":true,\"etcd\":true,\"general\":true,\"k8s\":true,\"kubeApiserverAvailability\":true,\"kubeApiserverBurnrate\":true,\"kubeApiserverHistogram\":true,\"kubeApiserverSlos\":true,\"kubePrometheusGeneral\":true,\"kubePrometheusNodeRecording\":true,\"kubeProxy\":true,\"kubeScheduler\":true,\"kubeStateMetrics\":true,\"kubelet\":true,\"kubernetesApps\":true,\"kubernetesResources\":true,\"kubernetesStorage\":true,\"kubernetesSystem\":true,\"network\":true,\"node\":true,\"nodeExporterAlerting\":true,\"nodeExporterRecording\":true,\"prometheus\":true,\"prometheusOperator\":true}},\"fullnameOverride\":\"prometheus\",\"grafana\":{\"admin\":{\"existingSecret\":\"grafana-admin-credentials\",\"passwordKey\":\"admin-password\",\"userKey\":\"admin-user\"},\"defaultDashboardsEnabled\":true,\"defaultDashboardsTimezone\":\"utc-03\",\"enabled\":true,\"forceDeployDashboards\":false,\"forceDeployDatasources\":false,\"fullnameOverride\":\"grafana\",\"serviceMonitor\":{\"enabled\":true}},\"kube-state-metrics\":{\"fullnameOverride\":\"kube-state-metrics\",\"prometheus\":{\"monitor\":{\"enabled\":true,\"relabelings\":[{\"action\":\"replace\",\"regex\":\"(.*)\",\"replacement\":\"$1\",\"sourceLabels\":[\"__meta_kubernetes_pod_node_name\"],\"targetLabel\":\"kubernetes_node\"}]}},\"selfMonitor\":{\"enabled\":true}},\"kubeApiServer\":{\"enabled\":true},\"kubeControllerManager\":{\"enabled\":true,\"endpoints\":[\"10.10.1.42\"]},\"kubeDns\":{\"enabled\":false},\"kubeEtcd\":{\"enabled\":true,\"endpoints\":[\"10.10.1.42\"],\"service\":{\"enabled\":true,\"port\":2381,\"targetPort\":2381}},\"kubeProxy\":{\"enabled\":true,\"endpoints\":[\"10.10.1.42\"]},\"kubeScheduler\":{\"enabled\":true,\"endpoints\":[\"10.10.1.42\"]},\"kubeStateMetrics\":{\"enabled\":true},\"kubelet\":{\"enabled\":true,\"serviceMonitor\":{\"metricRelabelings\":[{\"action\":\"replace\",\"sourceLabels\":[\"node\"],\"targetLabel\":\"instance\"}]}},\"nameOverride\":\"grafana-prometheus-stack\",\"nodeExporter\":{\"enabled\":true,\"serviceMonitor\":{\"relabelings\":[{\"action\":\"replace\",\"regex\":\"(.*)\",\"replacement\":\"$1\",\"sourceLabels\":[\"__meta_kubernetes_pod_node_name\"],\"targetLabel\":\"kubernetes_node\"}]}},\"prometheus\":{\"enabled\":true,\"prometheusSpec\":{\"enableAdminAPI\":true,\"podMonitorSelectorNilUsesHelmValues\":false,\"probeSelectorNilUsesHelmValues\":false,\"replicaExternalLabelName\":\"replica\",\"replicas\":1,\"retention\":\"100h\",\"ruleSelectorNilUsesHelmValues\":false,\"serviceMonitorSelectorNilUsesHelmValues\":false,\"storageSpec\":{\"volumeClaimTemplate\":{\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"50Gi\"}},\"storageClassName\":\"oci-bv\"}}},\"walCompression\":true}},\"prometheus-node-exporter\":{\"extraArgs\":[\"--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)\",\"--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$\"],\"fullnameOverride\":\"node-exporter\",\"podLabels\":{\"jobLabel\":\"node-exporter\"},\"prometheus\":{\"monitor\":{\"enabled\":true,\"relabelings\":[{\"action\":\"replace\",\"regex\":\"(.*)\",\"replacement\":\"$1\",\"sourceLabels\":[\"__meta_kubernetes_pod_node_name\"],\"targetLabel\":\"kubernetes_node\"}]}},\"resources\":{\"limits\":{\"memory\":\"2048Mi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"512Mi\"}},\"service\":{\"portName\":\"http-metrics\"}},\"prometheusOperator\":{\"enabled\":true,\"logLevel\":\"info\",\"prometheusConfigReloader\":{\"resources\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"200m\",\"memory\":\"50Mi\"}}}},\"thanosRuler\":{\"enabled\":false}}",
                "version": "56.0.0"
              }
            ],
            "name": "grafana-prometheus",
            "namespace": "grafana-prometheus",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "fullnameOverride: prometheus\r\nnameOverride: grafana-prometheus-stack\r\n\r\ndefaultRules:\r\n  create: true\r\n  rules:\r\n    alertmanager: true\r\n    etcd: true\r\n    configReloaders: true\r\n    general: true\r\n    k8s: true\r\n    kubeApiserverAvailability: true\r\n    kubeApiserverBurnrate: true\r\n    kubeApiserverHistogram: true\r\n    kubeApiserverSlos: true\r\n    kubelet: true\r\n    kubeProxy: true\r\n    kubePrometheusGeneral: true\r\n    kubePrometheusNodeRecording: true\r\n    kubernetesApps: true\r\n    kubernetesResources: true\r\n    kubernetesStorage: true\r\n    kubernetesSystem: true\r\n    kubeScheduler: true\r\n    kubeStateMetrics: true\r\n    network: true\r\n    node: true\r\n    nodeExporterAlerting: true\r\n    nodeExporterRecording: true\r\n    prometheus: true\r\n    prometheusOperator: true\r\n\r\nalertmanager:\r\n  fullnameOverride: alertmanager\r\n  enabled: true\r\n  ingress:\r\n    enabled: false\r\n\r\ngrafana:\r\n  enabled: true\r\n  fullnameOverride: grafana\r\n  forceDeployDatasources: false\r\n  forceDeployDashboards: false\r\n  defaultDashboardsEnabled: true\r\n  defaultDashboardsTimezone: utc-03\r\n  serviceMonitor:\r\n    enabled: true\r\n  admin:\r\n    existingSecret: grafana-admin-credentials\r\n    userKey: admin-user\r\n    passwordKey: admin-password\r\n\r\nkubeApiServer:\r\n  enabled: true\r\n\r\nkubelet:\r\n  enabled: true\r\n  serviceMonitor:\r\n    metricRelabelings:\r\n      - action: replace\r\n        sourceLabels:\r\n          - node\r\n        targetLabel: instance\r\n\r\nkubeControllerManager:\r\n  enabled: true\r\n  endpoints: # ips of servers \r\n    - 10.10.1.42\r\n    #- 192.168.30.39\r\n    #- 192.168.30.40\r\n\r\ncoreDns:\r\n  enabled: true\r\n\r\nkubeDns:\r\n  enabled: false\r\n\r\nkubeEtcd:\r\n  enabled: true\r\n  endpoints: # ips of servers\r\n    - 10.10.1.42\r\n    #- 192.168.30.39\r\n    #- 192.168.30.40\r\n  service:\r\n    enabled: true\r\n    port: 2381\r\n    targetPort: 2381\r\n\r\nkubeScheduler:\r\n  enabled: true\r\n  endpoints: # ips of servers\r\n    - 10.10.1.42\r\n    #- 192.168.30.39\r\n    #- 192.168.30.40\r\n\r\nkubeProxy:\r\n  enabled: true\r\n  endpoints: # ips of servers\r\n    - 10.10.1.42\r\n    #- 192.168.30.39\r\n    #- 192.168.30.40\r\n\r\nkubeStateMetrics:\r\n  enabled: true\r\n\r\nkube-state-metrics:\r\n  fullnameOverride: kube-state-metrics\r\n  selfMonitor:\r\n    enabled: true\r\n  prometheus:\r\n    monitor:\r\n      enabled: true\r\n      relabelings:\r\n        - action: replace\r\n          regex: (.*)\r\n          replacement: $1\r\n          sourceLabels:\r\n            - __meta_kubernetes_pod_node_name\r\n          targetLabel: kubernetes_node\r\n\r\nnodeExporter:\r\n  enabled: true\r\n  serviceMonitor:\r\n    relabelings:\r\n      - action: replace\r\n        regex: (.*)\r\n        replacement: $1\r\n        sourceLabels:\r\n          - __meta_kubernetes_pod_node_name\r\n        targetLabel: kubernetes_node\r\n\r\nprometheus-node-exporter:\r\n  fullnameOverride: node-exporter\r\n  podLabels:\r\n    jobLabel: node-exporter\r\n  extraArgs:\r\n    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)\r\n    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$\r\n  service:\r\n    portName: http-metrics\r\n  prometheus:\r\n    monitor:\r\n      enabled: true\r\n      relabelings:\r\n        - action: replace\r\n          regex: (.*)\r\n          replacement: $1\r\n          sourceLabels:\r\n            - __meta_kubernetes_pod_node_name\r\n          targetLabel: kubernetes_node\r\n  resources:\r\n    requests:\r\n      memory: 512Mi\r\n      cpu: 250m\r\n    limits:\r\n      memory: 2048Mi\r\n\r\nprometheusOperator:\r\n  enabled: true\r\n  logLevel: info\r\n  prometheusConfigReloader:\r\n    resources:\r\n      requests:\r\n        cpu: 200m\r\n        memory: 50Mi\r\n      limits:\r\n        memory: 100Mi\r\n\r\nprometheus:\r\n  enabled: true\r\n  prometheusSpec:\r\n    replicas: 1\r\n    replicaExternalLabelName: \"replica\"\r\n    ruleSelectorNilUsesHelmValues: false\r\n    serviceMonitorSelectorNilUsesHelmValues: false\r\n    podMonitorSelectorNilUsesHelmValues: false\r\n    probeSelectorNilUsesHelmValues: false\r\n    retention: 100h\r\n    enableAdminAPI: true\r\n    walCompression: true\r\n    storageSpec: \r\n        volumeClaimTemplate:\r\n          spec:\r\n            storageClassName: oci-bv\r\n            accessModes: [\"ReadWriteOnce\"]\r\n            resources:\r\n              requests:\r\n                storage: 50Gi\r\n\r\nthanosRuler:\r\n  enabled: false\r\n\r\n"
            ],
            "verify": false,
            "version": "56.0.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
